[{"categories":null,"contents":"First contribution to another project on Github ever! :)\nIt was very small, the library was a very small and new library that wanted to groups lots of functionalities pertaining to strings for Common Lisp.\nThe creator/maintener asked for help on the lisp subreddit and I gave it a try.\nIt was a good way to get my feet wet, a very small project with a responsive maintainer that took the time to explains things to me on how to contribute on Github and such.\n","permalink":"https://www.julienrouse.com/projects/contributions/cl-string/","tags":["common-lisp","string","lisp"],"title":"First contribution: cl-string"},{"categories":null,"contents":"It feels good to fix the theme I use for the blog, I give back to a tool I will use for some time hopefully :)\nThe problem was that when looking at blog post with full resolution on my laptop, it displayed nicely. But when viewing it with smartphone resolution, it looked like this:\n  After some duckduckgoing, I stumbled upon box-sizing: border-box, an element I have not used before.I went to MDN to see what is was MDN page on box-sizing, then looked around if it could be that element tripping me up.\nBut according to that doc, because the CSS used border-box instead of content-box, my content should have behaved nicely and not overflowing.\nAfter more time looking around, a StackOverflow response once again saved the day. When using border-box on a container, you have to set the width on the inner child.\nI added width: 100% on the inner child, and \u0026ldquo;voila\u0026rdquo;:\n  ","permalink":"https://www.julienrouse.com/projects/contributions/hugo-resume/","tags":["css","hugo-resume","responsive design"],"title":"hugo-resume fix some css"},{"categories":null,"contents":"While looking at an article explaining the new \u0026ldquo;best fit\u0026rdquo; GC strategy for OCaml here, they had a link toward the source code and I went to see what it looks like.\nHere is the source I was looking at, and the string documenting the struct did not have the same name for the field in the struct. It\u0026rsquo;s a tiny tiny thing but the kind that feels messy when you read the code.\n","permalink":"https://www.julienrouse.com/projects/contributions/ocaml/","tags":["ocaml","documentation","gc"],"title":"Tiny contribution to Ocaml's GC documentation"},{"categories":null,"contents":"Race for the galaxy milestone Since 2019, I played almost 1000 games of Race for the Galaxy (online on boardgamearena). So to mark this milestone, I am writing down a few tips and observations, and hopefully when I\u0026rsquo;ll hit 2000, 5000 or even 10 000 games I\u0026rsquo;ll be able to see if I still agree.\nI am currently around 350ELO on boardgamearena, with a top around 420 last year. Best players are at least 550 I think, so I have a long way to go.\nDisclaimer: all discussions in this post are about the base Race for the Galaxy game, two-players only and with the \u0026ldquo;New Worlds\u0026rdquo; variant. (at the start of the game, choose between two worlds instead of being locked with only one).\nNote that I won\u0026rsquo;t explain what Race for the Galaxy is in this post, maybe another time. But your favorite search engine will help you find out all about this wonderful card game ;)\nTips First turn settle \u0026ldquo;surfing\u0026rdquo; I\u0026rsquo;m not actually sure what\u0026rsquo;s the actual term for this action, but I call \u0026ldquo;surfing\u0026rdquo; when you bet on the other player choosing a specific action, so you don\u0026rsquo;t take it and choose another one to speed you up.\nA very common way to do this (and quite powerful too), on the first turn is to select the \u0026ldquo;trade\u0026rdquo;/\u0026ldquo;produce\u0026rdquo; phase without selecting the \u0026ldquo;settle\u0026rdquo; phase. This way, if your opponent select \u0026ldquo;settle\u0026rdquo;, you get to draw cards immediately, and because often the first world played is a windfall one, you get to \u0026ldquo;trade\u0026rdquo; the next turn but your opponent won\u0026rsquo;t be able to. So you gain some tempo on him.\nThis works better if your starting world is a producing one, because then you produce one good at least, and two in the best case.\nI climbed from 300 to 350ELO recently in large part because I had the opportunity to use this opener, and that helped me snowball faster to the finish line than my opponent.\n\u0026ldquo;Lost Species Ark\u0026rdquo; card is a trap early-mid game \u0026ldquo;Lost Species Ark\u0026rdquo; is a green card costing 5, producing genes good and allowing to draw two cards on the \u0026ldquo;produce\u0026rdquo; phase. For a long time, I thought this card was marvelous and would try to keep it in my opening hand and playing it as soon as possible, because I thought the payoff would be so worth it.\nIn reality, what it did most of the time was getting me in a situation where I would spend all my cards to play this one, then desperately \u0026ldquo;trade\u0026rdquo;/\u0026ldquo;produce\u0026rdquo; for a couple turn because I was card starved, and if my opponents were half-decent, they would \u0026ldquo;develop\u0026rdquo;/\u0026ldquo;settle\u0026rdquo; so much in the meantime that I would be too much behind.\nAlmost the only way to play this card is toward the endgame, or when you have the 2-cost development that allows you to play any world for free. And having both in your starting hand can sometimes be a great opener if you \u0026ldquo;develop\u0026rdquo;/\u0026ldquo;produce\u0026rdquo; and you surf on your opponent \u0026ldquo;settle\u0026rdquo;. But this is a lot of \u0026ldquo;ifs\u0026rdquo;, most of the time, avoid playing this card early at any cost, it\u0026rsquo;s very rarely worth it.\nTwo rare production/windfall worlds + the 6 rare development Two rare production/windfall worlds + the 6 rare development can be an opener to \u0026ldquo;consume x2\u0026rdquo;/\u0026ldquo;produce\u0026rdquo; very early and consume 6VPs per round, hopefully closing the game early enough that your opponent will still be trying to find a strategy.\nThe downside is that you won\u0026rsquo;t draw any card once you are starting with this, so it\u0026rsquo;s a sink or swin strategy.\nOne way to make it work is to:\n have your opening world be the rare windfall world that discounts other rare worlds, one rare world costing one (or two) (preferably a windfall one) and the 6-cost development. This will require you have 8-9 cards in hand to put everythings first turn: \u0026ldquo;explore +1/+1\u0026rdquo; / \u0026ldquo;trade\u0026rdquo; to get 5 cards. Hopefully, your opponent \u0026ldquo;settle\u0026rdquo; so you can play you rare world. second turn: \u0026ldquo;develop\u0026rdquo; / \u0026ldquo;produce\u0026rdquo;. If your opponent did not settle the turn before, you hope he does now. If your opponent did settle on turn 1 or 2, you now have 2 goods and the development, so you hammer down the \u0026ldquo;consume x2\u0026rdquo; / \u0026ldquo;produce\u0026rdquo; phase to end in 4 turns. If not, you have to waster another turn to settle but usually, people play at least one world early on so I think in most cases you could expect to be set up.  Recording games to review your play This one is also a tip, but I\u0026rsquo;ll put it in its own category.\nIn various fields, you can read that recording yourself and reviewing your plays can help you see mistakes and correct them. It\u0026rsquo;s true for sports, videogames, and probably a bunch of other activities so let\u0026rsquo;s try it for this game! Also when I face better opponents, that could help me review their game instead of mine to see if I can grab some strategies or tricks from them.\nI am only trying this one for the past five games, so I will need to report on the results later on, but what I see right now is that by putting the energy to record myself, I play more focused, which increase my odds of winning.\nThis is also very easy to set up, I use simplescreenrecorder myself but a bunch of alternatives exists (Kazam, OBS to quote a few).\nFinal words I would like to write a bit more about Race for the Galaxy, it\u0026rsquo;s a very fun game (most of the time). We\u0026rsquo;ll see how the next 1000 games will go!\n","permalink":"https://www.julienrouse.com/blog/race_for_the_galazy_milestone/","tags":["boardgame","rftg"],"title":"Race for the galaxy milestone"},{"categories":null,"contents":"Wrong server address for SSH Story time I was setting up SSH to be able to contact Gitlab repositories.\nBut at the very end, when comes the step to test if the connection is succesful, I followed the Gitlab documentation (use the command ssh -T git@gitlab.example.com) and it was not working.\nI had no trouble setting it up for Github a few days before, and the setup is pretty similar. I could not pinpoint what was going on at first.\nI figured I must have gone a bit fast following the docs, recreated a new pair of keys, tried again, and still no luck.\nI went to the Github documentation to set up SSH, started from scratch again. And still, when it was time to test the connection, it would not be working.\nAnd then, after at least 30min of trying to understand why, the realisation came to me (and maybe you understand as soon as you saw the command): the domain in the doc is not a real one, so I was trying again and again to test my SSH connection again a non-existent domain.\nSo if I had skipped that step and went straight to cloning a repository, it would have worked!\nConclusion: read carefully Lesson for this time: even when following a step-by-step guide for something that should be trivial, pay attention to what the command contains to not waste time debugging afterward.\n","permalink":"https://www.julienrouse.com/blog/wrong-domain-to-test-ssh-setup/","tags":["ssh","gitlab"],"title":"Wrong domain to test SSH setup (Gitlab)"},{"categories":null,"contents":"Emacs Since the start of January, I am trying to switch back to Emacs!\nHere are some modes (packages/plugins in Emacs lingo) that I want to try.\norg-mode I am really drawn out to Org Mode, a major mode (a mode is a plugin in Emacs) to help with todo-lists, planning, agendas, literate programming and a lot more!\nI used it in the past with various success, but because I could not use Emacs at work. I stopped using Emacs altogether to stop switching between editor. I had settled for the Foam plugin for VSCode, which offers some nices todo-list capabilities, an also a good base for growing a knowledge base in the Zettelkasten way.\nSince then, an extension for org-mode appeared: org-roam, wich looks like a serious contender I would like to try.\n(And actually this post is written with org-mode, and exported to Markdown with ox-pandoc, an extension to use the magnificent pandoc to export org files to various format.)\nMagit This one is totally new to me, a porcelain for Git really well integrated in Emacs.\nI have heard a lot of good things on Magit, so it is on my lists of packages to try!\nlsp-mode lsp-mode add support for language server protocol in Emacs. I think this idea came originally from Microsoft/VSCode to simplify the development of tooling for new language and editors. This looks nice and should allow to have a good experience for most programming language.\nAdditionally, there is some integration with popular packages like Helm, Ivy and other as well so it might help me to discover new packages.\neglot also add support for lsp in Emacs, but looks less complete at first glance.\nOther packages that look promising And some less well known packages:\ndocker.el docker.el is unsurprinsigly a mode to work with Docker container in Emacs.\nkubel kubel is a package for managing Kubernetes cluster.\nI discovered it while watching this very very good video: Conquering Kubernetes with Emacs\nConclusion I am back in Emacs land, so much to (re)discover.\nAnd if you never heard of org-mode before (or Emacs), make yourself a favor and go try it for yourself. It is such a different experience that you will learn something for sure.\n","permalink":"https://www.julienrouse.com/blog/emacs-again/","tags":["emacs","short"],"title":"Emacs again"},{"categories":null,"contents":"Post-mortem This article was drafted during NaNoWriMo 2020.\nI hit a frustrating problem while deploying to production at work so here is a little postmortem.\nThe problem The problem came from a Jenkins build, from a repository that had not been updated since a week. We wanted to deploy from a release branch to master. The error was from an installation of MongoDB server 4.2 in a Dockerfile (not an official Dockerfile from MongoDB but an install of MongoDB server in our own Dockerfile).\nSpoiler: a solution I\u0026rsquo;ll give right away a solution for people that don\u0026rsquo;t want to read all of it.\nThe problem was that MongoDB server 4.3 and 4.4 had a change in a post-installation script (only for Debian I think) that adds a call to systemctl. That change was backported to MongoDB server 4.2 in October, and was part of an update to the deb package mongodb-server around November 15.\nIf systemctl is not present (in my case, in the Docker container based of a Debian image) when the post-installation script is called, the installation of the package fails and the build breaks.\nTo circumvent that problem, you can run ln -s /bin/true /usr/local/bin/systemctl (or RUN -s /bin/true /usr/local/bin/systemctl in the Dockerfile) before trying to install mongodb-server. This will skip the systemctl call.\nYou should probably not do that if you need systemctl elsewhere in your system though.\nStarting the investigation At first I thought our deployment pipeline had a hiccup. The build was fine on the develop branch and on the release branch. It sat there for a full week with no problem. I also checked the last commit from the week before and it was a change to the frequency of a cron job. Not really a build-breaking change usually.\nI launched the build again. Our infrastructure is a bit weak, we have failing build every other day that can be successful by launching them again. This time it did not solve the problem. I also relaunched the build in develop to see if it was a problem with the environment, but it also failed.\nI could not pinpoint the problem yet but it seemed as if it were not from the new code, nor from the pipeline. Also, the Dockerfile used an official node image, with an exact version (like node:X.X.X-slim) so I expected things to be pretty stable between each run. The node image is itself based on debian-stretch.\nI summoned my inner Sherlock Holmes and went investigating further.\nLooking more thoroughly at the error message First tries did not work. Now I had to dig into the error message a little more.\n1 2 3 4 5 6  /var/lib/dpkg/info/mongodb-org-server.postinst: 43: /var/lib/dpkg/info/mongodb-org-server.postinst: systemctl: not found dpkg: error processing package mongodb-org-server (--configure): subprocess installed post-installation script returned error exit status 127 dpkg: dependency problems prevent configuration of mongodb-org: mongodb-org depends on mongodb-org-server; however: Package mongodb-org-server is not configured yet.   The error message above contains some information:\n Line 1: /var/lib/dpkg/info/mongodb-org-server.postinst: 43: /var/lib/dpkg/info/mongodb-org-server.postinst: systemctl: not found means that at the line 43 of a file mongodb-org-server.postinst there was a call to systemctl that failed because the program was not found Line 2: dpkg: error processing package mongodb-org-server (--configure): this one tell us that its the mongodb-org-server package called with the --configure package that went badly Line 3: subprocess installed post-installation script returned error exit status 127 a bit more detail for the line above, not too much info here. This looks like a weirdly worded message Line 4-5-6: Other information that comes from the first messages above.  If you put the first line of the error message /var/lib/dpkg/info/mongodb-org-server.postinst: 43: /var/lib/dpkg/info/mongodb-org-server.postinst: systemctl: not found into a search engine, you find a SO post1 that contained only an answer at the time and a post with a very similar error. His answer was cryptic to me, howewer, so I had to dig again.\n  In the SO post, there is a link to the official Dockerfile for MongoDB 4.4 so I went to take a look.\nThe truth is in the Dockerfile After reading it a bit and searching for systemctl, I found this line in the Dockerfile2:\n1 2  # starting with MongoDB 4.3, the postinst for server includes \u0026#34;systemctl daemon-reload\u0026#34; (and we don\u0026#39;t have \u0026#34;systemctl\u0026#34;) \u0026amp;\u0026amp; ln -s /bin/true /usr/local/bin/systemctl \\   So that was a good hint. Thanks to all the developers that comments their code :) I tried to add RUN ln -s /bin/true /usr/local/bin/systemctl to my Dockerfile and it worked! The build was fine now.\nBut it\u0026rsquo;s not over. I had to understand it to see if it would come bite our project later or if this adds some constraints on the repository because we skipped a step in a post-install script.\nUnderstanding why that fixed the problem The post-install script and systemctl The part that failed is here3:\n1 2  # Check for changes to the service file systemctl daemon-reload   systemctl is a part of a group of software called systemd4. systemd provides a system and service manager that runs as PID 1 and starts the rest of the system (from their website).\nWhat is /bin/true? I discovered /bin/true as a command (/bin/false exists too!). It\u0026rsquo;s a command that you can use to always return 0 (which is a truthy value in the shell). This is like using a constant for true in shell scripts.\nWhat is ln? I knew about ln for links between files on the system before but I never saw it used to replace the comportment of a command by another one.\n1  ln -s /bin/true /usr/local/bin/systemctl   This command creates a symbolic link5 (not a hard link6) from systemctl to /bin/true. Like a pointer to it: when you call systemctl, it will redirect you to the true command, and execute it instead.\nPutting it all together So we have seen that using ln in combination with /bin/true and /usr/local/bin/systemctl did work to allow the build to succeed. But is that right to make it build with a step that is skipped?\nIn fact, I don\u0026rsquo;t know this one for sure (if you know tell me please). My understanding is that the post-install script uses this command to update the configuration of a service if it exists. But in my case I don\u0026rsquo;t have it so it should not matter if I don\u0026rsquo;t update it.\nUnderstanding why it hits us today and not before? Another thing I would like to understand is why this happened to us this Thursday and not a week ago on the last build, or even a few months before? Maybe answering that could help prevent other build failure in the future.\nAs it turns out, looking around in the repository for the Dockerfile for MongoDB where I found the trick to solve my problem, there is a comment7:\n1 2 3 4  # starting with MongoDB 4.3 (and backported to 4.0 and 4.2??), # the postinst for server includes an unconditional \u0026#34;systemctl daemon-reload\u0026#34; # (and we don\u0026#39;t have anything for \u0026#34;systemctl\u0026#34; to talk to leading to # dbus errors and failed package installs)   It indicates that the change for 4.3+ might have been backported, let\u0026rsquo;s find out.\nThe following commit8\n  is for the change in February and it has been backported to 4.29 on October 15.\n  (and has been backported to 4.010 then reverted on November 11)\n  It\u0026rsquo;s getting closer but not quite, we last built our project successfully November 12, and it failed November 19. So what could have caused this?\nFinding when the Debian package was updated My best guess right now is that the Debian package mongodb-server we use in the Dockerfile was updated between the two dates.\nI ended up looking at a website for Debian package, trying to get the changelog but I hit a 404 on the changelog page. Not helpful.\nI also found the dpkg list for mongodb-server but I dis not find a date of update in there.\nRight now, I don\u0026rsquo;t know how to get the information apart from contacting a maintainer directly. I\u0026rsquo;ll edit the post when/if I find the response.\nA couple other considerations Putting it in the SO post I tried to recap what I learned in the original SO post I found at first to help others in the same boat.\n  Amusingly, the day just before I wrote my answer, someone answered as well in this question. It would have saved time to me but I would not have looked into the problem as much but I am glad I did, I discovered a lot of stuff.\nNot deploying into master at 4.30p.m. This one should be common sense but we hit this problem around 4.30p.m. on a Thursday and that was not fun. It did not break anything but it add a lot of stress to break a build at the time when you just want to end your day.\nI\u0026rsquo;d like to thank my colleague Maxime who was with me at that time and did some initial investigation on the Jenkins builds with me.\nMaybe another solution? While I looked around, I tried to search with systemctl not found into a search engine and found another SO post11 that proposed to install systemd. I did not try it but I expect it might have worked.\nBut it is not the relevant solution for me. We would not use systemd or systemctl in this repository so I feel it is better to skip this part of the script we don\u0026rsquo;t need, instead of installing a \u0026ldquo;dead\u0026rdquo; package.\nConclusion All in all, this problem took only a couple of hours to get fixed but it was annoying because of the circumstances. Having a build fail because of an external package being updated is never fun.\nBut it was a good learning experience, I discovered /bin/true and systemctl, I got to look at the MongoDB open-source repository and the docker-library repository and the impact stayed low on the project so not too bad. 😀\n  The initial SO post \u0026#x21a9;\u0026#xfe0e;\n Official DockerFile for MongoDB server \u0026#x21a9;\u0026#xfe0e;\n mongodb-org-server.postinst l43 \u0026#x21a9;\u0026#xfe0e;\n systemd \u0026#x21a9;\u0026#xfe0e;\n https://en.wikipedia.org/wiki/Symbolic_link \u0026#x21a9;\u0026#xfe0e;\n https://en.wikipedia.org/wiki/Hard_link \u0026#x21a9;\u0026#xfe0e;\n https://github.com/docker-library/mongo/blob/8afebb1ef44b8076f9f4472c689409835707399d/update.sh#L163 \u0026#x21a9;\u0026#xfe0e;\n https://github.com/mongodb/mongo/commit/0690089e24d1ae398b3cafc348a0b9c9f5f24527#diff-2c47e73d74099557344473c7c23c11843015cfd12316d1d19ba5b008dfa6ece2 \u0026#x21a9;\u0026#xfe0e;\n https://github.com/mongodb/mongo/blob/v4.2/debian/mongodb-org-server.postinst \u0026#x21a9;\u0026#xfe0e;\n https://github.com/mongodb/mongo/blob/v4.0/debian/mongodb-org-server.postinst \u0026#x21a9;\u0026#xfe0e;\n https://askubuntu.com/q/988266 \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://www.julienrouse.com/blog/systemctl_not_found_while_installing_mongodb_server/","tags":["nanowrimo2020","post-mortem"],"title":"\"Systemctl not found\" while installing MongoDB server"},{"categories":null,"contents":"My Nanowrimo 2020 I always dreamed to be a writer when I was little. It was my answer to everybody that asked me what I wanted to be when I grow up between middle school until late high school. (It was actually my third career choice, my first dream \u0026ldquo;job\u0026rdquo; was being an Eskimo).\nNow I\u0026rsquo;m a bit far off from that path, but writing slowly for this blog brings me a bit closer to that dream. But I write sporadically and my backlog for new articles is getting full. Getting to it is always the hardest part. So I went on my way to subscribe to NaNoWriMo: the National Novel Writing Month!\nIn fact, I\u0026rsquo;m not writing a novel. But I joined anyway to prepare drafts and articles for this blog. The goal of NaNoWriMo is to write 50000 words during November. For some people, it usually means drafting a novel, or a series of essays. For me the goal will be to add 50000 words to my blog (at least to write drafts.) And maybe toward the end I\u0026rsquo;ll write a few short stories if I have a good pace to try my hands at that kind of writing.\nTo help in this journey, you can join a local community of people writing their own things. I joined the one from Montréal (Canada, QC) to have a small community to share my achievements and my hardships.\n50000 words in a month is a lot. To give some perspective, since I started this blog in 2018, I wrote around 20000 words and published around 12000 of them. So if I \u0026ldquo;win\u0026rdquo; NaNoWriMo this year, I\u0026rsquo;ll more than double what I did previously in approximately two years.\nThe plan To write that much, I needed a plan. So I started by looking at my backlog of ideas and projects, ordering item, tagging them accordingly. As of today I have around 50 things I want to talk about during NaNoWrimo (and this article is the first one) including:\n Git and the great value of knowing in depth our tooling The Kush Empire: there were black Pharaoh! The influence of fencing, the great values of this sport and how doing sport at a very high level translates to the workplace. What I read/listen/watch recently that had a big impact on me Python 3.9 and the PEP about adding macros to Python (as in: Lisp\u0026rsquo;s macro, not C\u0026rsquo;s macro) Reflection on my mistakes and my wins of 2020 The benefits of being exposed to many programming languages and paradigms And a lot more hopefully!  I am also hoping to nourish a habit of writing by pushing me to write every day for a month. For now I intend to write 30 minutes in the morning before work, 30 minutes for my lunch break and 30 minutes or more in the evening. The evening is a bit harder to plan for me but I should be able to at least get a good hour of writing every day.\nObstacles I know already that a few obstacles are coming ahead:\n I\u0026rsquo;ll have a very busy month at work. We are launching in production a service that has been in the working for more than a year without being seen by a user. (I know how much of a great idea this is\u0026hellip;) But in a way, I think doing NaNoWriMo will help me reset my brain from work and that will be a good time to do it. I need to spend less time on my computer, not more time. Since March, I am working from home (like many people in COVID time). It means I am no longer going outside of my house every day, I can spend sometime 4 hours straight without getting up, and after work I also spend time on my computer for personal endeavour. This means I am spending a huge amount of time in the day at the same place,without moving much. This one is difficult to balance, for now I think I will replace watching random videos on Youtube by writing for my blog but if I want to stay in good shape in the long run, I need to find a way to move more while working, or write somewhere else than the computer. Maybe a dictaphone? Handwriting is good but too slow and I still need to write it down in a digital form afterward so not so good. I plan to write some articles in French. For now it\u0026rsquo;s really difficult for me to write on technical topics even so it is my mother tongue because it always feels weird to have half the vocabulary in French and half in English. Even weirder is translating everything in French, because it becomes really hard to follow. In real-life nobody uses only French terms (in France at least, in Quebec, French is a bit more used for software jargon). To help me overcome this difficulty, I will use bitoduc, an English-French dictionary of software terms.  Let the fun begin :) NaNoWriMo started November first, this was the first article of a hopefully long series! I\u0026rsquo;m looking forward for this month and I really like the idea of bursting through a short period of time, with the help and motivation of the community.\nIf you ever dreamed of writing, be it for a novel, a blog, poetry\u0026hellip; or anything really, join me :)\nBonus 1 While daydreaming about how I would go on about doing NaNoWrimo and my old dreams of being a writer, I found a couple interesting link for writing:\n  To write better, develop a habit of writing A HN thread about this eponym article\n  Be prolific stating that quantity and quality goes hand in hand. The more you produce, the more you progress. The story in the article was actually debunked in many threads in HN or Reddit for having no real source, but I think the meaning being all of it stay true. In my case, if I never write anything in the hope of writing the perfect story the first time I try, it will be a lot less interesting than if I wrote lots of essays to train and grow a style. I think a caveat here is that producing too much can lead to brain diarrhea. If you just write everything that goes through your head, quality can be quite low. As always, you must find a balance.\nBut in general, writing a lot is beneficial compared to writing very little when you want to improve your writing.\n  Bonus 2 I put in my NaNoWriMo profile that one of my all-time favourite books was Philip Pullman\u0026rsquo;s His Dark Materials. But to add it to my list, I had to find the title in English and it\u0026rsquo;s a lot different than in French. I spent some time in the Wikipedia page for it to try to understand why and discovered that one of the major sources of inspiration for this trilogy was John Milton\u0026rsquo;s Paradise Lost. I have reserved a copy already from my local library, I\u0026rsquo;ll have it in 10 days :) I still don\u0026rsquo;t have a good idea for why the name is quite different from one language to another, though :/\n","permalink":"https://www.julienrouse.com/blog/my-nanowrimo-in-2020/","tags":["nanowrimo2020","writing"],"title":"My NaNoWriMo of 2020"},{"categories":null,"contents":"I enjoy programming, fencing (especially sabre), history and sustainable development.\nOpen invite. If you want to talk about any of those subject, or if you are looking for help solving a problem, feel free to reach out to me and let\u0026rsquo;s have a chat, I want to talk to you. Email me at conta-remove-ct@julienrouse.com.\nDoing so, I follow the steps of patio11, Lars and Hillel (and probably more people I am not aware of). More than one time I was wondering if I could bother someone to exchange about a piece they wrote but I could not muster the courage. These guys make it very clear that you are welcome to reach out to them and it is awesome.\n  I like getting email. I can\u0026rsquo;t promess you I\u0026rsquo;ll reply quickly, nor that I will reply at all but I usually read all of my mail. If I don\u0026rsquo;t respond in a timely manner, don\u0026rsquo;t hesitate to send me another mail\n  I like a good discussion. I like people challenging me, telling me about things I did not know, challenging them back and exchanging ideas.\n  I like sharing experiences. The nicest (software related) interactions I had in the past are usually having a experienced peer help me grow, or me helping a less-experienced peer get on the right track to solve their problem. If you like that kind of exchange, talk to me!\n  I like programming and software. This is even more true lately when I have to deal with something related to:\n Lisp (I\u0026rsquo;m a bit familiar with Common Lisp and Clojure but anything Lisp-related I\u0026rsquo;m interested) Functionnal programming Meta-programming Esoteric programming languages (see Piet, brainfuck, J\u0026hellip;) Datalog (or query-language or database that are not mainstream but with a good foundation) Type System and good/clever use of them    Something you can help me with:\n I you see anything wrong with this website, please let me know! If you want to react to anything I wrote on a post, please let me know! I\u0026rsquo;m always interested to hear about new essays or papers on software engineering. If you have wrote one, or found one and you\u0026rsquo;d like to share, please let me know!  And also:\n  I don\u0026rsquo;t like social media Most of the time I would not want to have a nice exchange on a social media.\n  This is not an invite for recruiters That\u0026rsquo;s why Linkedin exists.\n  I don\u0026rsquo;t like phone call If you want to speak to me by phone, marry a Rousé.\n  ","permalink":"https://www.julienrouse.com/blog/open-invite/","tags":["open-invite"],"title":"Open Invite"},{"categories":null,"contents":"Scaling Code Review Recently I hit a problem with my team. Our code review process did not scale up with our team growing (especially in the last weeks). Here are some reflexions on that problem and some reflexions on what we choose to do to see if it improves our process.\nContext We started as 3 developers more than one year ago, and grew to 6 developers now (and the occasional intern that I will not take into account in my rambling, even though it adds a bit of noise on the line). Our professional experiences range from 3 years to 20+ years as developer.\nOur Code review Process The process went a bit like this:\n you finish a task you commit/push your final code on a feature branch you open a pull request you assign the whole team as reviewer you wait for someone to notice (or you go bug people around on the next daily scrum) the rest of the team look at it (eventually), add comments if they feel necessary you address the comments either by making a change in the code or by responding to the comments (can include a live discussion if there is a lot of clarification to do, or a strong disagreement) repeat the last two steps until we can come to an agreement anybody merges the code if there is an approval (or decline the PR if appropriate)  For small task it was mostly OK, and on bigger task we would have a lot of back and forth but pretty often we would end up on a meeting just to chat and agree on what needed to be done or not. Not too time consuming.\nSide note: we also have a document/checklist with what should be done for a PR to be merged, like presence of unit tests, does it pass all criteria for the task, respect rules in sonarqube etc. I really like that we have this explicit checklist, even if it is not enforced as hard as we probably should.\nUntil four people it stayed OK, but the fifth started to push the limit of this process.\nWhat happened most of the time is that at the start of our two-week sprint, everybody went on to take tasks, code happily, and pull requests are opened. Then people started to look at other people\u0026rsquo;s pull request a bit, comment on some things, then go start a new task and sometimes start to address some of the comments on their own pull request. Pull requests took a long time to be closed, and there was always more PR being opened than PR being closed. Then at some point, the pile of stuff to do was empty so people started to look again at the PR, but by that time there was a lot of them, and keeping track of everything was hard.\nCode reviews became frustrating and also a bottleneck because QA was waiting for the new features to come out to test them but they had the first week of the sprint almost empty, and the second week very busy. This is far from ideal.\nTo try to fix it, we added a new rule that as a team we MUST close PR as fast as possible. It\u0026rsquo;s a vague requirement but the intent was for people to try to close their PR before taking some more work. It helped but it was not enough, and the sixth developer came shortly after we introduced this rule, and it became unbearable again.\nNow I\u0026rsquo;m looking to scale up our process, with some suggestion and input from the team.\nProblems that we won\u0026rsquo;t solve this time Diffents views on what is clean code / code that can go to production One aspect that takes a lot of time is discussing what is acceptable or not.\nSome of us are really strict in how much unit testing must be done, how good naming is important, how conventions should be followed to form a coherent code base (not only convention enforced by linter).\nAnd some of us are more \u0026ldquo;result focused\u0026rdquo; or \u0026ldquo;output focused\u0026rdquo; as they like to say. If it \u0026ldquo;works\u0026rdquo;, even if it\u0026rsquo;s a horrible hack, you can ship it.\nI lean strongly on the first camp, can you tell? My biggest pet peeve is naming. But I also recognize that sometime shipping working code sooner is more important than polishing it for 3 months. As always, you must find a good balance and context can have a huge influence on how much time you have to refactor/clean your code\nI think this problem is somewhat tangential to our time problem. We need to align people better on what production code should look like, but that is not our main problem in this case I believe (but I could be terribly terribly wrong.)\nI watched a few of Kevlin Henney\u0026rsquo;s talk recently and I think he has some good bit on this aspect of programming (and many other, go take a look).\nAnd of the course the obligatory xkcd comic:\nMetrics First step: to solve this problem I want to gather data, to be able to tell in the future if the changes we implemented as a team works or not. (But be cautious that when you introduce metrics, people find way to abuse them.)\nMeasuring time to close PR One metric I am interested to improve is time elapsed between opening the PR and closing it. (To be more accurate, one would need to count only business day, that\u0026rsquo;s what I intend to do.)\nIf a PR is opened and closed on the same day, I will count the time as 0 day. I\u0026rsquo;m not interested to be more precise than a day here but one could also count it in hour. I don\u0026rsquo;t think it will benefit us though as our PR stay open almost always more than a day I guesstimate spoiler alert: I was mostly wrong on that guess\nMeasuring day of the sprint the PR are closed Another thing I am interested is on which day PR are closed. If we close all our PR on the last two days of the sprint, it leaves very little room for QA to do her job properly. It\u0026rsquo;s also a very frustrating experience to have fixes incoming, just before the demo or even live during a demo. It\u0026rsquo;s nerve wrecking, and not how I envision to work as professionally as possible.\nNumber of comments on each PR This one is mostly curiosity on my part: does amount of comment correlate closely with time to close PR?\nIntuitively I think that it would be the case but sometimes you get surprise with intuition so I wanted to know. spoiler alert: it does correlate weakly, but less than what I thought\nData in image I took advantage of 35 min before the last meeting of the week, on a Friday morning to gather the data on our sprint. I did it \u0026ldquo;by hand\u0026rdquo;, opening every PR that was closed since the start of the current sprint and filling a table in Excel. I think it took me around 20 min to get all the data. If I had to do that every week, I would like to automate this process. Maybe Bitbucket has an API or a plugin? But for now I intend to do it at most three times so I do not see the need to automate it.\nHere are three graphics I plotted in Excel with the data I freshly gathered (with some French in it):\nThe first one is the number of days to close a PR on the x-axis, and number of PR that were closed in that many days in the y-axis.\n  This shows that contrary to my guesstimate above, we do close quite a lot of PR in less than one day. Obviously those includes configuration changes, very small fixes and people merging their own PR without waiting code review to go fast\u0026hellip; But still, it\u0026rsquo;s a decent number.\nOn the opposite spectrum, we have some PR that took more than 2 days to close. (The one that took 11+ days was a draft PR opened at the start of the previous sprint, and closed at the beginning of the current sprint. It is an outlier but I kept it anyway). Those are the one we are looking to get rid of.\nThe second plot is the frequency of PR merged by day. x-axis is the day of the week (in French but you can probably work with it ;) ), with the week number as a suffix. \u0026ldquo;1\u0026rdquo; for the first week of the sprint, \u0026ldquo;2\u0026rdquo; for the second week.\n  This one is not too surprising I think, lots of PR being closed on the last 3 days before the demo on the last Friday of the sprint.\nAnd the last one, the number of comments on the y-axis and the time it took to close a PR in day on the x-axis.\n  This did surprise me a bit more. You can still see that every PR that stayed open more than 2 days have some comment in it.\nBut we have also PR with 30 comments that were closed in one day.\nI don\u0026rsquo;t know how to interpret this one yet, I will wait for the next time to see if I can get more insight. Maybe I\u0026rsquo;m also needing more context on each PR to better understand what this graph shows?\nIdeas to improve the process Here I will present some of the ideas we brainstormed, the one we decided to try to implement and the one we did not pick.\nInstead of putting everybody as a reviewer on each PR, we could only put two peoples. Benefits would be:\n to reduce noise (less cooperation needed, less time spent finding a time where everybody is available) allows to have a tie when disagreeing (two reviewers and the one opening the PR) faster agreement time spent overall for the team on one pull request should be divided by a factor X, with X probably in the range [1.5, 3] if I\u0026rsquo;m being optimistic. There is nothing scientific in that estimation, only gut feeling  Cons are:\n people not reviewing the code will be less familiar with the whole code base (unless they go read the PR for themselves but restrain from commenting unless big mistake). how to choose the pair to review I\u0026rsquo;d like to try this one, but I\u0026rsquo;m a bit torn on how to choose the pair of reviewers. It is always the same people together? Random pair? Familiarity? Time available at the time of deciding who\u0026rsquo;s going to take care of it?  Put one person in charge of all PR One developer main task for a sprint could be to review and approve/fix - we decided against this. The goal is still to share knowledge for the whole team.\nPut one person in charge of one PR Each PR has one main reviewer - We are going to try this.\nWe put everybody as a reviewer on the PR in Bitbucket, but only one of use is responsible for accepting/declining. Everybody is still welcome (and encouraged) to go take a look at the PR, and comment on things that are major flaws.\nPut one person in charge of MERGING all PR related to one repository This one was - in my eyes - an interesting suggestion.\nSometimes the main bottleneck was that 3 or 4 PR landed on the same repository, for many different features and write in the same files. Without someone in charge for the coordination, it looks like a mess to merge everything.\nWe decided to go with this one, and to keep things light, to just decide at the daily scrum in the morning if we needed to have people step up for the merge-coordination duty.\nDon\u0026rsquo;t commit uninvited to someone else\u0026rsquo;s branch This one should be a no-brainer but if you push things on somebody else\u0026rsquo;s branch without communicating/cooperating, bad things might happen. At the very least, it can be frustrating.\nWhile obvious, I (and others on the team) have been doing it on some occasion so we are trying to reiterate on the fact that we should really avoid doing this.\nFlag comment in PR with priority Some people were complaining that sometimes we would not close PR because there were comments that nobody answered, but those comments were irrelevant, only rhetorical or not important.\nSo we decided to add a little flag like \u0026ldquo;question:\u0026rdquo;, \u0026ldquo;important:\u0026rdquo; in our comment when applicable to help the reviewer get a feel for when everything important is fixed.\nThis one I have mixed-feeling about, I\u0026rsquo;m sure most of the team will forget about it in the first 2 days, me included. It\u0026rsquo;s a nice-to-have, but I have a feeling it will take a long time before everybody follow this.\nConclusion So we are trying right now all of this, but we are also doing the biggest release in production for the project since 18 months so I expect that we won\u0026rsquo;t follow half of what we set out to do.\nStill now we have some really nice ideas to improve, and when things settle down I expect the team to abide by the new rules we set for ourselves.\nAs an aside, the team did a really good job to come up with ideas on how to improve, and the process was very smooth. All the frustration from the previous weeks on this topic turned into a very productive 30 min meeting on getting better at it.\nIt does not always end up so well, but I think it is also the result of our team growing together. Whatever the outcome of our experiment is, we are still a better team this week that the previous one and that is amazing to witness.\n","permalink":"https://www.julienrouse.com/blog/scaling_code_review/","tags":["code-review","improving"],"title":"Scaling Code Review"},{"categories":null,"contents":"The Art of Code In his talk, Dylan Beattie does a really good recap about what kind of art has been enabled by using computers.\nFrom Conway\u0026rsquo;s Game of Life, to Mandelbrot set, then going on about the use of CGI in the movie industry, then moving on to code as an art like the Obsfucated C Challenge, the magic of Quines (program that prints themselves when run). It goes on about esoteric programming languages, Whitespace, Piet, Shakespeare and then the last part is dedicated to his own eso-lang, Rockstar.\n","permalink":"https://www.julienrouse.com/blog/presentation_the_art_of_code/","tags":["review","eso-lang","short"],"title":"Review: the Art of Code"},{"categories":null,"contents":"Mutation Testing Why slaying mutants is good for measuring the quality of your tests.\nThe problem: assessing test quality Test automation of a piece of software is a well developed practice these day. But assessing the quality of those tests is not easy. One really big mistake is to rely on coverage because you can have 100% (or close to) coverage but still having really low test quality.\nSay you have a beautiful function foo defined as\n1 2 3 4  /* Return the answer to life, the universe and everything */ function foo(){ return 42; }   And your test looks like:\n1 2 3  // very basic version of a test, hopefully very far from a real-life example resultFoo = foo(); assert(true, \u0026#39;result of foo should be 42\u0026#39;);   If you run the test with your favourite test runner, it will pass! (obviously because we passed true in the assert function call) You get the greenlight. Even sadder, you also get a 100% coverage for this function because we called it in the test (even if we don\u0026rsquo;t use the result of that call to determine if the test pass or not).\nOf course this is a contrived example to put emphasis on my point above that coverage is not a reliable metric for code quality. (At the bottom of the article I link to a Kata revolving exactly around this idea of false coverage, and about fixing bad tests)\nA solution: mutation testing One way to get more confidence into you test suite is to use Mutation testing. The way it works is by changing a tiny bit of your code, say replace == by != in one place in your code, then run your test suite against the modified version of your code.\nThis new version of your code is called a mutant. If all your tests pass on the mutant, it means your test quality is not good enough because it did not catch this change. In this case the mutant is sometimes called a zombie because it lives (did not get \u0026lsquo;killed\u0026rsquo; by the test suite).\nThen you repeat the process of introducing another mutation from the original code to create another mutant (say this time you replace let c = new Foo() by let c = null) then you run the test suite again and you determine if the mutant has been killed.\nRinse and repeat a lot, then you count how many mutant you killed in relation to how many were produced. This ratio is called the mutation score, and should be as close to 1 as possible. Mutation testing allows to be more confident in the test you write.\nThere are two main assumption behind mutation testing, let\u0026rsquo;s see what they are:\nThe first one is the competent programmer hypotheses. It states that most bugs introduced by an experienced programmer into a codebase are small syntactic errors. The second one is the coupling effect hypotheses. It asserts that simple faults can create other faults/bugs in an emergent/cascading fashion.\nMutation operator The changes in the code (replacing == by != like in the first example) are called mutations, and they are defined by mutation operator. There are many different families of mutation operator.\nYou have operator on (non-exhaustive list):\n boolean: == and !=, || and \u0026amp;\u0026amp;, \u0026lt; with \u0026lt;=, \u0026gt; and \u0026gt;= arithmetic: * with +, - and / statement deletion statement duplication OOP: replacing call for object constructor by null, changing method and field scope operator specialized for specific features of a programming language (like C++) 1 operators for security purposes2  Pitfalls Of course it\u0026rsquo;s not all good, if it was we\u0026rsquo;d be using it in every project since it was invented (in the 70\u0026rsquo;s!)\nInstability of the mutations Because we mutate pieces of code, it happens that mutant causes a crash or an infinite loop (when say you change the condition on a loop) and that hinders the tests.\nSome mutation testing framework deal with that by letting you disable some classes of mutations operator if it does not play well with your codebase.\nIn most cases you get a timeout for that mutant, so you don\u0026rsquo;t get a clear result. And it can slow down considerably your mutation testing run.\nPerformance Another negative thing (and, from what I understand, until recently the major drawback that prevented spreading of mutation testing) is that for even a small code base you can generate hundred or thousands of mutants. Then you need to tests every one of them. That\u0026rsquo;s a huge resource sink, that could only be overcome for small projects or medium-big projects with huge resources. (Remember the idea was first devised in the 70\u0026rsquo;s)\nNow we have much more resources at hand so it is less a problem but still, that can quickly add time to your test pipeline (especially if your test suite is slow). To help the performance aspect, there are numerous optimizations that have been devised, like only generating mutation for line of code that are covered by at least a test, testing the mutants by running only the specifics tests that covers the line with the mutation instead of the whole test suite etc. This make using mutation testing a possibility.\nAnother option is to use extreme mutation (the paper \u0026lsquo;Will My Tests Tell Me If I Break This Code?'3 is a good read). Basically extreme mutation will remove any code from a tested function, and replace it with a value of the type of the method.\nThis generates less mutant so is quicker to test. You can find here a comparison of regular mutation vs extreme mutation testing of various java library with the framework Pit using a standard generator (called Gregor) and a extreme mutation generator (called Descartes).\nBelow you can find the result of that comparison:\n    Descartes  Gregor      Project Time Mutants Time Mutants   authzforce 0:08:00 626 1:23:50 7296   aws-sdk-java 1:32:23 161758 6:11:22 2141689   commons-cli 0:00:13 271 0:01:26 2560   commons-codec 0:02:02 979 0:07:57 9233   commons-collections 0:01:41 3558 0:05:41 20394   commons-io 0:02:16 1164 0:12:48 8809   commons-lang 0:02:07 3872 0:21:02 30361   flink-core 0:14:04 4935 2:29:45 43619   gson 0:01:08 848 0:05:34 7353   imagej-common 0:08:07 1947 0:29:09 15592   jaxen 0:01:31 1252 0:24:40 12210   jfreechart 0:05:48 7210 0:41:28 89592   jgit 1:30:08 7152 16:02:03 78316   joda-time 0:03:39 4525 0:16:32 31233   jopt-simple 0:00:37 412 0:01:36 2271   jsoup 0:02:43 1566 0:12:49 14054   sat4j-core 0:53:09 2304 10:55:50 17163   pdfbox 0:44:07 7559 6:20:25 79763   scifio 0:24:14 3627 3:12:11 62768   spoon 2:24:55 4713 56:47:57 43916   urbanairship 0:07:25 3082 0:11:31 17345   xwiki-rendering 0:10:56 5534 2:07:19 112605    You can see that going from extreme mutation to standard mutation testing is roughly an order of magnitude in number of mutant generated and time taken to test every mutant.\nConclusion Try it sometime, for me it was really fun and eye opening to catch bad tests I wrote!\nAnd remember:\nSoftware testing proves the existence of bugs not their absence.\nBonus: resources to dig deeper  The original paper that first described mutation testing: R. A. DeMillo, R. J. Lipton and F. G. Sayward, \u0026ldquo;Hints on Test Data Selection: Help for the Practicing Programmer,\u0026rdquo; in Computer, vol. 11, no. 4, pp. 34-41, April 1978, doi: 10.1109/C-M.1978.218136. If you are interesting to know a bit more about different techniques and different tradeoffs to implement mutation testing, the PIT library (Java) has a good overview on mutant generation, test selection, mutant insertion and mutant detection. A Kata (using Java) to see and test yourself the fact that coverage is not a reliable metric, and practicing hand-on to fix tests. The English Wikipedia page on mutation testing The Descartes engine github page (the engine implementing extreme mutation testing)    Parsai, A., Demeyer, S., De Busser, S.: C++11/14 Mutation operators Based on Common Fault Patterns(2004) \u0026#x21a9;\u0026#xfe0e;\n Dadeau, F., Héam, P-C., Kheddam, R.: Mutation-Based Test Generation from Security Protocols in HLPSL(2011) in: 2011 Fourth IEEE International Conference on Software Testing, Verification and Validation \u0026#x21a9;\u0026#xfe0e;\n Niedermayr, R., Jurgens, E., Wagner, S.: Will My Tests Tell Me If I Break This Code? (2016) in: Proceedings of the International Workshop on Continuous Software Evolution and Delivery (CSED ’16) \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://www.julienrouse.com/blog/introduction_to_mutation_testing/","tags":["test-automation","quality","mutation-testing"],"title":"Introduction to Mutation Testing"},{"categories":null,"contents":"Rust, TLA+, Aesthetics and more It\u0026rsquo;s been a while I have not put my thoughts in here, so this entry will be a mix of some of the papers or blogs I read recently, some thoughts about Rust and TLA+ because I started trying them both recently, and a few interesting talks I saw recently. The Aesthetics part will be discussed in the blog entry that I read recently and was an interesting reflection on how tools shape our way of thinking.\nTLA+ I\u0026rsquo;ll start by talking about TLA+ because it lead me to other subjects I\u0026rsquo;ll talk after. I discovered TLA+ after reading a few blog posts seen on HackerNews.\nBasically the idea behind TLA+ is that writing software that is correct is extremely hard to do (more so is you include concurrency/parallelism in your software). TLA+ is a high-level language for modeling systems, that relies on math to check the correctness of the model. It has been used successfully by engineers in big company like Amazon and Intel to help them design robust systems.\nTLA+ is mainly the work of Leslie Lamport (I did not know about him before), a fairly well-known computer scientist known for his work in distributed systems (and being the initial developer of LaTeX). He received many prizes including the Turing award in 2013.\nOn The TLA+ Home Page there is lots of resources to start using it, links to the toolbox, an introductory video course and more information to get started. I am currently at the seventh lecture of the introductory course and it is an interesting concept that I\u0026rsquo;m willing to try to put in practice. I\u0026rsquo;ll probably come back writing back more on this.\nRust Rust is the \u0026ldquo;new\u0026rdquo; language (since 2010) developed by Mozilla with the goal to have a \u0026ldquo;safe\u0026rdquo;, low-level and performant programming language (as an alternative for C/C++). It features quite a few interesting ideas that I find intriguing and I decided to try it out.\nWhat drew me in was:\n immutability: something that I really like about Clojure as well! In Rust it seems it\u0026rsquo;s an opt-out feature, if you declare a variable like let x = 0 it is immutable but you can opt-out with the keyword mut (as in let mut x = 0) low-level: I have a very limited exposure to low-level languages (and concepts). I did quite a lot of C in my university classes and an internship in C++ dealing with OpenGL but to be honest I forgot most of it. So that will be a good opportunity to get back to low-level programming. no runtime: I read about that and I have no idea what does this mean in practice but I want to find out! Right now my idea of that is that Rust is embeddable is other programs via C/C++ FFI with no overhead. I hope to be able to call Clojure code from Rust and vice versa (I saw some repos and blog post about it so it seems definitely doable). safe: It seems Rust does a lot of compile time checking to ensure safety and correctness (even for threaded/concurrent program). As far as I understand, it is thanks to is rich type system.  Another good point is that because Rust is a recent language (and good fundings), it has all the niceties like package manager (Cargo), utilities for documentation included (seriously running cargo doc --open is really a nice experience!), nice integrations to the majors editors, installation is very straightforward, so far documentation is really high quality\u0026hellip;\nI started the Rust book, very nicely done so far (I\u0026rsquo;m in the middle of chapter 3).\nI will be progressing toward the end of this book and then try my hands with it. It should match very well with TLA+ as well.\nBlogs I won\u0026rsquo;t talk here about all the interesting blog posts I read since the last time I wrote in this blog (a few months ago) but I wanted to highlight and share some very interesting read I had this past few months:\nSoftware, Aesthetics, and Craft: How Java, Lisp, and Agile Shape and Reflect Their Culture In this post, the author compare the difference between \u0026ldquo;classical\u0026rdquo; and \u0026ldquo;gothic\u0026rdquo; architecture (real architecture, not software architecture), the elements that characterize both (notably in how much freedom is given to the craftsman) and how we can think about programming language in the same way.\nThis piece is really nice and I really think you should read it too :)\nHow I became a better programmer from James Long (creator of Prettier) This post is like many others on the internet where the author describes how he try to be a better programmer. Very quickly his point his:\n Find inspiration in other people put keep a critical eye on their work Don\u0026rsquo;t feel pressured to work all the time, truly revolutionary stuff happens only every few year at best Ignore fluff. Learning syntax and the specific API of a new tool is far less interesting in the long run compared to deep knowledge like algorithm, data structure, how a compiler works, etc Look for previous research about what you are trying to solve, it will probably change your mind in a lot of ways Take on big projects. Get uncomfortable. By trying to accomplish new thing you learn much more  And then he list a few things that helped him be a better programmer:\n Learn C Write a compiler Learn macros (as in Lisp macro, not C macro) SICP Understand continuations Try a new language  His blog his overall pretty interesting too so go take a look :)\nViability of unpopular programming languages by John D. Cook The blog posts of John are very interesting (and very short) so if you like a quick read go for it!\nIn this one he rants about how we rank programming language by popularity (whatever that means) but that does not define how viable that language is (taking Perl, Common Lisp, F# and Erlang as examples).\nMisc  Debugging designs with tla+ Programming Models for Distributed Computation Not a blog but a repo containing a book about distributed computation Google Technical Writing Courses Zero-cost abstractions in Rust Modern Common Lisp Daniel Miessler Tutorials I read it mostly for the infoSec part  Videos Here are a few conferences talks about Rust\nConsidering Rust (Jon Gjengset) Making the case for Rust, while also putting emphasis on the weaknesses of it.\nRust at speed - building a fast concurrent database (Jon Gjengset) Discussion about the experience of writing Noria, a high-performance database prototype in Rust\nHow Rust view tradeoffs(Stephen Klabnik) Great view about the Rust culture and decision making\nBooks While reading about TLA+ and Leslie Lamport, I stumbled upon the ACM Digital Library which has free books on programming! Notably one of the latest book is a compilation of the work of Leslie Lamport on concurrency.\n","permalink":"https://www.julienrouse.com/blog/rust_tla+_and_more/","tags":["rust","tla+","book","aesthetics"],"title":"Rust, TLA+, Aesthetics and more"},{"categories":null,"contents":"Part3: Adding upgrades to the game. Introduction This article is the third part of a tutorial aiming at discovering Svelte while building a game. I also wrote a short post on Svelte and the idea behind this tutorial. Below you can find the links to check those posts or other parts of the tutorial.\n introduction to Svelte part1: Start of the tutorial: making a Derivative Idle clone with Svelte part2: Going further with Svelte using components and props part3: Adding upgrades to the game  In this part we will focus mostly on how to implement an upgrade system.\nUpgrades Now we will implement upgrades for our game. Upgrades are buyable bonuses that grants bonuses to production in many way. The most straightforward is giving a multiplier bonus to the production of a building. That\u0026rsquo;s what we will be working on right now. Note that Clicker Idle upgrades gives a bonus to buildings depending on how many specific building has been bought by the player (not the total number of building the player has, because we have buildings producing other buildings). We will have to track that number bought to implement the upgrades.\nAlso Derivative Clicker gives the same bonus to all the buildings on the same row (all the buildings on the top row are tier1 buildings, producing a currency, then tier2 buildings on the second row produces tier1 buildings and so on and so forth for tier3, tier4\u0026hellip;).\nAn example: if the bonus is 1% bonus to tier1 building for each tier1 buildings bought, if you buy 5 \u0026ldquo;1th Derivative\u0026rdquo; and 5 \u0026ldquo;Combinatorics\u0026rdquo; buildings, you have 10% bonus to all of those buildings.\nDifferentiating building bought and building total. To do that first thing is to create a variable in store.js to handle the new information.\n1 2 3 4 5 6 7 8 9 10 11  /* store.js */ ... // first level buildings export const firstDerivativeNum = writable(0); export const firstDerivativeBoughtNum = writable(0); export const combinatoricsNum = writable(0); export const combinatoricsBoughtNum = writable(0); // second level buildings export const secondDerivativeNum = writable(0); export const secondDerivativeBoughtNum = writable(0);   Now that we have that, we can define props for the buildings and adjust the template:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32  \u0026lt;!-- Building.svelte --\u0026gt; \u0026lt;script\u0026gt; // imports declarations  ... // variables declarations  ... // props declaration  ... export let numberOfBuildingBought; // reactive declarations  ... // functions declarations  ... function updateNumbers(){ ... numberOfBuildingBought.update(n =\u0026gt; n + 1); } ... \u0026lt;/script\u0026gt; ... \u0026lt;button ...\u0026gt; ... \u0026lt;p\u0026gt;Owned:{$numberOfBuilding} ({$numberOfBuildingBought})\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   And now we can import the new stores and pass them to our Building components:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... import { money, proofs, firstDerivativeNum, firstDerivativeBoughtNum, secondDerivativeNum, secondDerivativeBoughtNum, combinatoricsNum, combinatoricsBoughtNum } from \u0026#39;./store.js\u0026#39;; ... \u0026lt;/script\u0026gt; ... \u0026lt;Building name=\u0026#34;1th Derivative\u0026#34; numberOfBuilding={firstDerivativeNum} numberOfBuildingBought={firstDerivativeBoughtNum}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;Combinatorics\u0026#34; currencyProduced={proofs} numberOfBuilding={combinatoricsNum} numberOfBuildingBought={combinatoricsBoughtNum}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;2nde Derivative\u0026#34; currencyProduced={firstDerivativeNum} numberOfBuilding={secondDerivativeNum} numberOfBuildingBought={secondDerivativeBoughtNum}\u0026gt;\u0026lt;/Building\u0026gt;   Fixing an accidental bug feature In the last part we introduced a bug. A building\u0026rsquo;s cost is dependent on how many of that building there are. But now that other buildings can generate buildings themselves, that\u0026rsquo;d be better if the cost would be associated with how many buildings were bought, not how many there are in total. Because we already solved the issue of differentiating bought versus total, the fix is as simple as:\n1 2 3 4 5 6 7 8  \u0026lt;!-- Building.svelte --\u0026gt; \u0026lt;script\u0026gt; ... // reactive declarations  ... $: cost = ($numberOfBuildingBought + 1) * 5; ... \u0026lt;/script\u0026gt;   A new component for upgrades Let\u0026rsquo;s define a new component. To do that, let\u0026rsquo;s create a new file called Upgrade.svelte.\nTheir states will be:\n how many we bought (you can buy the same upgrade many times) they will have a cost that scale of of how many we bought they\u0026rsquo;ll have a name  Upgrade component has a lot in common with the Building component, it is even a subset of it. We can copy the Building component and remove what we don\u0026rsquo;t need. (Mostly anything that has to do with producing things).\nThe result is this:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47  \u0026lt;!-- Upgrade.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  import { money } from \u0026#39;./store.js\u0026#39;; import { currencyToString } from \u0026#39;./utils.js\u0026#39; // props declarations  export let name; export let numberOfUpgradeBought; // reactive declarations  $: cantBuy = cost \u0026gt; $money; $: cost = ($numberOfUpgradeBought + 1) * 5; // function declarations\t\t// update the value of `currencyProduced` to the store, adding `n` to it.  function updateMoney(n){ money.update(m =\u0026gt; m + n); } // update the values of `currencyProduced` and `numberBuildings`  function updateNumbers(){ updateMoney(-cost); numberOfUpgradeBought.update(n =\u0026gt; n + 1); } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; button { outline: 1px solid black; background: aquamarine; cursor: pointer; } button.cantbuy { background: #555; color: #DDD; cursor: default; } \u0026lt;/style\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;h3\u0026gt;{name}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;costs {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Owned:{$numberOfUpgradeBought}\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   Then as usual we need to define new variables in the store to hold the number of upgrade bought:\n1 2 3 4  /* store.js */ ... // upgrades export const firstRowBoughtNum = writable(0);   And finally let\u0026rsquo;s use the new component in App.svelte:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... import Upgrade from \u0026#39;./Upgrade.svelte\u0026#39;; import { money, proofs, firstDerivativeNum, firstDerivativeBoughtNum, secondDerivativeNum, secondDerivativeBoughtNum, combinatoricsNum, combinatoricsBoughtNum, firstRowBoughtNum } from \u0026#39;./store.js\u0026#39;; ... // variable declarations  // reactive declarations  // function declarations \t// lifecycle functions \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; ... \u0026lt;div\u0026gt; \u0026lt;Upgrade name=\u0026#34;First row\u0026#34; numberOfUpgradeBought={firstRowBoughtNum}\u0026gt;\u0026lt;/Upgrade\u0026gt; \u0026lt;/div\u0026gt;   I made another big ugly thing here, using the div around the \u0026lt;Upgrade\u0026gt; tag to push it down the page. We will refactor all those ugly bits at the end of the tutorial because let\u0026rsquo;s face it it\u0026rsquo;s not the most interesting things to spend time on right now. But keep in mind that this is not the nicest way to do it.\nUpdating the production to take into account upgrades Now we have to modify how Building.svelte calculate how it produces its currency.\nWe need to have a props to know the bonus given by the upgrade.\nAlso we need to move things a bit, before we had a variable buildingProduction = 1 which is gonna be replaced by a reactive declaration taking account the bonus given by the upgrade given as a prop, and this will impact productionPerTick.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19  \u0026lt;!-- Building.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... // variable declarations  ... // props declarations  ... export let upgradeBonus; // reactive declarations  ... $: buildingProduction = 1 + Math.floor(1 * upgradeBonus); ... \u0026lt;/script\u0026gt;   We used Math.floor() to restrict the upgrade bonus to only whole number, so if a building produce initially 10 unit of currency each tick, with a bonus of 25%, it actually produces 12 unit per tick and not 12.5. For now I will let it that way, even so the upgrade is weaker than what is advertised, it is made to deal only with Integer (Num) and not Float or Double. Another way to do this is to calculate correctly the upgrade without flooring or rounding and to only apply the rounding on the number when we display it.\nNote also that is the formula we have twice the magic number 1 which refers to the initial number of unit produced by the building. I will let it that way for now, but in the future we will change it to allow for more flexibility when creating buildings.\nNext we need to change App.svelte to calculate the upgrade bonus and pass it to the buildings. For now for each building of the first tier we will get 25% bonus. These numbers are for development purpose and will be changed when we will balance the game progression.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declaration  ... // variables declaration  let firstTierUpgradeBonusPerBuilding = 0.25; // reactives declarations  $: firstTierBuildingBought = $firstDerivativeBoughtNum + $combinatoricsBoughtNum; $: firstTierBuildingUpgradeBonus = (firstTierBuildingBought * firstTierUpgradeBonusPerBuilding) * $firstRowUpgradeBoughtNum; \u0026lt;/script\u0026gt; ... \u0026lt;Building name=\u0026#34;1th Derivative\u0026#34; numberOfBuilding={firstDerivativeNum} numberOfBuildingBought={firstDerivativeBoughtNum} upgradeBonus={firstTierBuildingUpgradeBonus}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;Combinatorics\u0026#34; currencyProduced={proofs} numberOfBuilding={combinatoricsNum} numberOfBuildingBought={combinatoricsBoughtNum} upgradeBonus={firstTierBuildingUpgradeBonus}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;2nde Derivative\u0026#34; currencyProduced={firstDerivativeNum} numberOfBuilding={secondDerivativeNum} numberOfBuildingBought={secondDerivativeBoughtNum} upgradeBonus={0}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Upgrade name=\u0026#34;First row\u0026#34; numberOfUpgradeBought={firstRowUpgradeBoughtNum}\u0026gt;\u0026lt;/Upgrade\u0026gt;   Great! Now we can buy upgrades for our first tier buildings :)\nOne thing that is far from perfect is $: firstTierBuildingBought = $firstDerivativeBoughtNum + $combinatoricsBoughtNum;. Every time we are gonna add a new tier1 building, we are gonna need to update this. For now we will keep it that way but maybe later on we will find a way to simplify this.\nExtending the upgrades for the second tier (and adding an initial cost to upgrades) If you looked carefully at the last code snippet we used a placeholder for the upgrade bonus of \u0026ldquo;2nd Derivative\u0026rdquo; \u0026lt;Building name=\u0026quot;2nde Derivative\u0026quot; currencyProduced={firstDerivativeNum} numberOfBuilding={secondDerivativeNum} numberOfBuildingBought={secondDerivativeBoughtNum} upgradeBonus={0}\u0026gt;\u0026lt;/Building\u0026gt;.\nThat would be better to implement the upgrade for that tier of building too and it is pretty straightforward.\nFirst we need to add a new value in the store:\n1 2 3  /* store.js */ ... export const secondRowUpgradeBoughtNum = writable(0);   We will also modify Upgrade.svelte to make the initial cost of each upgrade different and we will also change the formula for the cost:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026lt;!-- Upgrade.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... // props declaration  ... export let initialCost; // reactive declaration  ... $: cost = initialCost * Math.pow(100, $numberOfUpgradeBought); ... \u0026lt;/script\u0026gt; ...   Then we can modify App.svelte to define the bonus for second tier building (100% bonus for each building of tier 2 bought).\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... import { ..., secondRowUpgradeBoughtNum } from \u0026#39;./store.js\u0026#39;; ... // variable declarations  ... let secondTierUpgradeBonusPerBuilding = 1; // reactive declarations  ... $: secondTierBuildingBought = $secondDerivativeBoughtNum; $: secondTierBuildingUpgradeBonus = (secondTierBuildingBought * secondTierUpgradeBonusPerBuild) * $secondRowUpgradeBoughtNum; ... \u0026lt;/script\u0026gt; ... \u0026lt;div\u0026gt; \u0026lt;Building name=\u0026#34;1th Derivative\u0026#34; numberOfBuilding={firstDerivativeNum} numberOfBuildingBought={firstDerivativeBoughtNum} upgradeBonus={firstTierBuildingUpgradeBonus}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;Combinatorics\u0026#34; currencyProduced={proofs} numberOfBuilding={combinatoricsNum} numberOfBuildingBought={combinatoricsBoughtNum} upgradeBonus={firstTierBuildingUpgradeBonus}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Building name=\u0026#34;2nde Derivative\u0026#34; currencyProduced={firstDerivativeNum} numberOfBuilding={secondDerivativeNum} numberOfBuildingBought={secondDerivativeBoughtNum} upgradeBonus={secondTierBuildingUpgradeBonus}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Upgrade name=\u0026#34;First row\u0026#34; numberOfUpgradeBought={firstRowUpgradeBoughtNum} initialCost={100}\u0026gt;\u0026lt;/Upgrade\u0026gt; \u0026lt;Upgrade name=\u0026#34;Second row\u0026#34; numberOfUpgradeBought={secondRowUpgradeBoughtNum} initialCost={10000}\u0026gt;\u0026lt;/Upgrade\u0026gt; \u0026lt;/div\u0026gt;   This time we pass an initial cost to the upgrade so that the first upgrade cost 100 time less than the second.\nAlso I put the Buildings into div to make the second tier building on a row below the first tier building. As usual, it is to not use CSS now, but at the end we\u0026rsquo;ll do a cleanup phase to use proper semantic for HTML and use CSS when needed.\nAdd a second tier building A last thing before wrapping up this part, we\u0026rsquo;ll add a second tier2 building that will produce Combinatorics to make things even (two tier1, two tier2 and two upgrades). To do that we need to have the proper values in store.js then adding the component into App.svelte.\n1 2 3 4 5 6 7 8  /* store.js */ ... //second level buildings ... export const probabilityNum = writable(0); export const probabilityBoughtNum = writable(0); ...   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... import { money, ..., , probabilityNum, probabilityBoughtNum, ...} from \u0026#39;./store.js\u0026#39;; ... // variable declarations  ... // reactive declarations  ... $: secondTierBuildingBought = $secondDerivativeBoughtNum + $probabilityBoughtNum; ... \u0026lt;/script\u0026gt; ...   This works fine and to finalize it, we should modify the function that display the currency the building is producing:\n1 2 3 4 5 6 7 8 9 10 11 12 13  /* utils.js */ import { ..., combinatoricsNum } from \u0026#39;./store.js\u0026#39; // Returns a string representing `currency`. If `c` is not recognized, returns \u0026#39;?\u0026#39; export function currencyToString(c){ ... ... else if (c === combinatoricsNum) result = \u0026#34; Combinatorics\u0026#34; ... }   That will display nicely on the new building that he is producing \u0026ldquo;Combinatorics\u0026rdquo;.\nRecap It\u0026rsquo;s the end of this part, this time we implemented a new tier2 building and a basic upgrade system. The full code follows:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  import Building from \u0026#39;./Building.svelte\u0026#39;; import Upgrade from \u0026#39;./Upgrade.svelte\u0026#39;; import { money, proofs, firstDerivativeNum, firstDerivativeBoughtNum, secondDerivativeNum, secondDerivativeBoughtNum, combinatoricsNum, combinatoricsBoughtNum, probabilityNum, probabilityBoughtNum, firstRowUpgradeBoughtNum, secondRowUpgradeBoughtNum } from \u0026#39;./store.js\u0026#39;; import { currencyToString } from \u0026#39;./utils.js\u0026#39;; // variable declarations  let firstTierUpgradeBonusPerBuilding = 0.25; let secondTierUpgradeBonusPerBuilding = 1; // reactive declarations  $: firstTierBuildingBought = $firstDerivativeBoughtNum + $combinatoricsBoughtNum; $: secondTierBuildingBought = $secondDerivativeBoughtNum + $probabilityBoughtNum; $: firstTierBuildingUpgradeBonus = (firstTierBuildingBought * firstTierUpgradeBonusPerBuilding) * $firstRowUpgradeBoughtNum; $: secondTierBuildingUpgradeBonus = (secondTierBuildingBought * secondTierUpgradeBonusPerBuilding) * $secondRowUpgradeBoughtNum; // function declarations \t// lifecycle functions \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;h1\u0026gt;You have {$money}{currencyToString(money)} and {$proofs}{currencyToString(proofs)}!\u0026lt;/h1\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Building name=\u0026#34;1th Derivative\u0026#34; numberOfBuilding={firstDerivativeNum} numberOfBuildingBought={firstDerivativeBoughtNum} upgradeBonus={firstTierBuildingUpgradeBonus}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;Combinatorics\u0026#34; currencyProduced={proofs} numberOfBuilding={combinatoricsNum} numberOfBuildingBought={combinatoricsBoughtNum} upgradeBonus={firstTierBuildingUpgradeBonus}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Building name=\u0026#34;2nde Derivative\u0026#34; currencyProduced={firstDerivativeNum} numberOfBuilding={secondDerivativeNum} numberOfBuildingBought={secondDerivativeBoughtNum} upgradeBonus={secondTierBuildingUpgradeBonus}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;Probability\u0026#34; currencyProduced={combinatoricsNum} numberOfBuilding={probabilityNum} numberOfBuildingBought={probabilityBoughtNum} upgradeBonus={secondTierBuildingUpgradeBonus}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;div\u0026gt; \u0026lt;Upgrade name=\u0026#34;First row\u0026#34; numberOfUpgradeBought={firstRowUpgradeBoughtNum} initialCost={100}\u0026gt;\u0026lt;/Upgrade\u0026gt; \u0026lt;Upgrade name=\u0026#34;Second row\u0026#34; numberOfUpgradeBought={secondRowUpgradeBoughtNum} initialCost={10000}\u0026gt;\u0026lt;/Upgrade\u0026gt; \u0026lt;/div\u0026gt;   Building:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74  \u0026lt;!-- Building.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  import { onMount } from \u0026#39;svelte\u0026#39;; import { money } from \u0026#39;./store.js\u0026#39;; import { currencyToString } from \u0026#39;./utils.js\u0026#39; // variable declarations  let tickSpeed = 1000; // props declarations  export let name; export let currencyProduced = money; export let numberOfBuilding; export let numberOfBuildingBought; export let upgradeBonus; // reactive declarations  $: cantBuy = cost \u0026gt; $money; $: cost = ($numberOfBuildingBought + 1) * 5; $: buildingProduction = 1 + Math.floor(1 * upgradeBonus); // currency produced per building per tick  $: productionPerTick = $numberOfBuilding * buildingProduction; // function declarations  // update the value of `currencyProduced` to the store, adding `n` to it.  function updateMoney(n){ money.update(m =\u0026gt; m + n); } // update the value of `currencyProduced` to the store, adding `n` to it.  function updateCurrencyProduced(n){ currencyProduced.update(m =\u0026gt; m + n); } // update the values of `currencyProduced` and `numberBuildings`  function updateNumbers(){ updateMoney(-cost); numberOfBuilding.update(n =\u0026gt; n + 1); numberOfBuildingBought.update(n =\u0026gt; n + 1); } // update `currencyProduced` with `productionPerTick` and set a timeout to call itself after `tickSpeed` ms  function launchTimeout(){ updateCurrencyProduced(productionPerTick); setTimeout(launchTimeout, tickSpeed); } // lifecycle functions  onMount(() =\u0026gt; { launchTimeout(); }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; button { outline: 1px solid black; background: aliceblue; cursor: pointer; } button.cantbuy { background: #555; color: #DDD; cursor: default; } \u0026lt;/style\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;h3\u0026gt;{name}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{buildingProduction}{currencyToString(currencyProduced)}/tick: costs {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Owned:{$numberOfBuilding} ({$numberOfBuildingBought})\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   Upgrade:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48  \u0026lt;!-- Upgrade.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  import { money } from \u0026#39;./store.js\u0026#39;; import { currencyToString } from \u0026#39;./utils.js\u0026#39; // props declarations  export let name; export let numberOfUpgradeBought; export let initialCost; // reactive declarations  $: cantBuy = cost \u0026gt; $money; $: cost = initialCost * Math.pow(100, $numberOfUpgradeBought); // function declarations\t\t// update the value of `currencyProduced` to the store, adding `n` to it.  function updateMoney(n){ money.update(m =\u0026gt; m + n); } // update the values of `currencyProduced` and `numberBuildings`  function updateNumbers(){ updateMoney(-cost); numberOfUpgradeBought.update(n =\u0026gt; n + 1); } \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; button { outline: 1px solid black; background: aquamarine; cursor: pointer; } button.cantbuy { background: #555; color: #DDD; cursor: default; } \u0026lt;/style\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;h3\u0026gt;{name}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;costs {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Owned:{$numberOfUpgradeBought}\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   store:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  /* store */ import { writable } from \u0026#39;svelte/store\u0026#39;; export const money = writable(20); export const proofs\t= writable(0); // first level buildings export const firstDerivativeNum = writable(0); export const firstDerivativeBoughtNum = writable(0); export const combinatoricsNum = writable(0); export const combinatoricsBoughtNum = writable(0); // second level buildings export const secondDerivativeNum = writable(0); export const secondDerivativeBoughtNum = writable(0); export const probabilityNum = writable(0); export const probabilityBoughtNum = writable(0); // upgrades export const firstRowUpgradeBoughtNum = writable(0); export const secondRowUpgradeBoughtNum = writable(0);   And finally utils:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  /* utils.js */ import { money, proofs, firstDerivativeNum, combinatoricsNum } from \u0026#39;./store.js\u0026#39; // Returns a string representing `currency`. If `currency` is not recognized, returns \u0026#39;?\u0026#39; export function currencyToString(c){ let result = \u0026#34;?\u0026#34;; if (c === money) result = \u0026#34;$\u0026#34;; else if (c === proofs) result = \u0026#34; proofs\u0026#34; else if (c === firstDerivativeNum) result = \u0026#34; 1st Derivative\u0026#34; else if (c === combinatoricsNum) result = \u0026#34; Combinatorics\u0026#34; return result; }   The result in picture:\n  You can also play with the game and the code in the Svelte REPL or just enjoy the game made so far (hosted by Surge).\nGoing further If you want to go further and see if you understood how the game works, here is some elements you can try to add to the game:\n another tier1 building that cost proof and generate money(and called \u0026ldquo;Computer\u0026rdquo; if you want to follow closely Derivative Clicker). another tier2 building that costs proof and generates Computer (see the point above) called \u0026ldquo;Assembly line\u0026rdquo;  What\u0026rsquo;s next? Next article will be the conclusion on this tutorial, with resources for going further and my opinion on Svelte so far.\nThe next part is here: COMING SOON\n","permalink":"https://www.julienrouse.com/blog/tutorial-for-idle-game-svelte-part3/","tags":["svelte","SPA","game","tutorial","idle","serie-svelte"],"title":"Tutorial for an Idle game with Svelte (Part3)"},{"categories":null,"contents":"Part2: Going further with Svelte using components and props Introduction This article is the second part of a tutorial aiming at discovering Svelte while building a game. I also wrote a very short post on Svelte and the idea behind this tutorial. Below you can find the links to check those posts or other parts of the tutorial.\n introduction to Svelte part1: Start of the tutorial: making a Derivative Idle clone with Svelte part2: Going further with Svelte using components and props part3: Adding upgrades to the game  Objectives for this part In this part we will learn how to use components, props and a state store to grow our game further.\nMake more buildings using components Right now we have one building producing money. That\u0026rsquo;s a start but it is not enough. What we want now is to make many more buildings.\nOne way to do that would be to copy-paste the following code to add a new building:\n1 2 3 4 5 6 7 8 9 10  \u0026lt;-- App.svelte --\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} buildings bought, next one cost {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;You gain {productionPerTick}$ / tick.\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} buildings bought, next one cost {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;You gain {productionPerTick}$ / tick.\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   Try it yourself, it makes a second building. The problem is that the two buildings are identical, and they share their internal state. The number of building bought, the cost of it, how much money it generates each tick\u0026hellip;\nWe need a way to encapsulate those information locally to have each building handle this for itself.\nAnd that is what components are for! (It\u0026rsquo;s the same concept in React[2] and Angular[3]). When you need to repeat the same independent elements (with slight variations) in different places, components are the way to go. They are also a nice way to have building block (think Lego) for your application. Usually you can have big components for the header, footer and main page. Then you can have smaller components like forms and menus that you can reuse in bigger components. And you can also compose your smaller components from even smaller components. It creates a tree architecture, with the root being often named App, the main entry point to your app, and then the leaf and nodes are other components used to build your app.\nTo create one, you need to create a .svelte file. (You can see that App.svelte is our root component here).Then inside the component you can declare some logic inside the \u0026lt;script\u0026gt; tag, some style inside the \u0026lt;style\u0026gt; tag and then a html template. The script and style part are local to the component by default. You can declare a new component Test.svelte that look like that:\n1 2 3 4 5 6 7 8  \u0026lt;!-- Test.svelte --\u0026gt; \u0026lt;style\u0026gt; button { background: red; } \u0026lt;/style\u0026gt; \u0026lt;button\u0026gt;Test button\u0026lt;/button\u0026gt;   Then import it in our App.svelte to use it:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... import Test from \u0026#39;./Test.svelte\u0026#39;; \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; ... \u0026lt;/style\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} buildings bought, next one cost {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;You gain {productionPerTick}$ / tick.\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} buildings bought, next one cost {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;You gain {productionPerTick}$ / tick.\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt; \u0026lt;Test\u0026gt;\u0026lt;/Test\u0026gt;   And the result:\n  You see that even so we declared a red background for \u0026lt;button\u0026gt;, because we declared it inside the component, the CSS is scoped and don\u0026rsquo;t interfere with the other elements on the page.\nLet\u0026rsquo;s go back to making a component for our buildings. You can delete Test.svelte. You can also delete in App.svelte the import to Test.svelte and the \u0026lt;Test\u0026gt;\u0026lt;/Test\u0026gt; code in the template.\nNow let\u0026rsquo;s create a component for our building. Create a file named Building.svelte and we are gonna remove every parts relating to our building from App.svelte to put it inside Building.svelte.\nWe are gonna remove everything from App.svelte except we gonna import the Building component, keep the declaration for money and in the template keep the title and insert two Building components.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  import Building from \u0026#39;./Building.svelte\u0026#39;; // variable declarations  let money = 20; // reactive declarations  // function declarations  // lifecycle functions \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;h1\u0026gt;You have {money} $!\u0026lt;/h1\u0026gt; \u0026lt;Building\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building\u0026gt;\u0026lt;/Building\u0026gt;   And inside the Building.svelte we have now:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54  \u0026lt;!-- Building.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  import { onMount } from \u0026#39;svelte\u0026#39;; // variable declarations  let money = 20; let numberOfBuilding = 0; let buildingProduction = 1; // $ produced per building per tick  let tickSpeed = 1000; // reactive declarations  $: cantBuy = cost \u0026gt; money; $: cost = (numberOfBuilding + 1) * 5; $: productionPerTick = numberOfBuilding * buildingProduction; // function declarations  // update the values of `money` and `numberBuildings`  function updateNumbers(){ money -= cost; numberOfBuilding += 1 } // update `money` with `productionPerTick` and set a timeout to call itself after `tickSpeed` ms  function updateMoney(){ money += productionPerTick; setTimeout(updateMoney, tickSpeed); } // lifecycle functions  onMount(() =\u0026gt; { updateMoney(); }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; button { outline: 1px solid black; background: aliceblue; cursor: pointer; } button.cantbuy { background: #555; color: #DDD; cursor: default; } \u0026lt;/style\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} buildings bought, next one cost {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;You gain {productionPerTick}$ / tick.\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   You can see we have kept only one \u0026lt;button\u0026gt; inside Building.svelte but we have inserted \u0026lt;Building\u0026gt;\u0026lt;/Building\u0026gt; twice in App.svelte to have two independent buildings.\nThat\u0026rsquo;s great! But if you test if, you\u0026rsquo;ll see a new problem. To highlight, let\u0026rsquo;s alter slightly the building to show for each building their money variable:\n1 2 3 4 5 6 7  \u0026lt;!-- Building.svelte --\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;p\u0026gt;Money: {money}$\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} buildings bought, next one cost {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;You gain {productionPerTick}$ / tick.\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   When you click on the buildings, you see that they are independent, but a bit too much! They don\u0026rsquo;t share a common money value anymore, each one use its own, and when they produce, it only goes to their own money stash as well. That is not what we want. We would like for them to have a shared money value, and then handle the rest of their state independently.\nUsing the store to handle global state One way to have some global state that can be shared among components is to have a store with value that components can subscribe to. They can also update the value if you allow them to, and any change to the value are propagated back to other component subscribing to that value as well. It is the same idea that React/Redux uses (or Reagent/re-frame1 in the ClojureScript ecosystem) .\nLet\u0026rsquo;s create our store, we need a JS file that we will call store.js and put some code in it: (I use /* store.js */ instead of \u0026lt;!-- store.js --\u0026gt; to show you that the code belongs to store.js because it\u0026rsquo;s no longer a template file, but a proper JS file. It allows you to copy paste my snippet without having an error into your editor.)\n1 2 3 4  /* store.js */ import { writable } from \u0026#39;svelte/store\u0026#39;; export const money = writable(20);   And now we can use it inside our App.svelte and Building.svelte.\nIn App.svelte, we need to import it, remove the local variable declaration and change slightly the template where we used it.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... import { money } from \u0026#39;./store.js\u0026#39;; // variable declarations  // we removed let money = 20;  ... \u0026lt;/script\u0026gt; \u0026lt;h1\u0026gt;You have {$money} $!\u0026lt;/h1\u0026gt; \u0026lt;Building\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building\u0026gt;\u0026lt;/Building\u0026gt;   Read from the store To reference a value from the store, you prepend the dollar sign $ before it\u0026rsquo;s name. Here to access the value of money in the template we use $money. What it does in reality is auto-subscribe to the store value, and unsubscribe to it when the component is destroyed using the onDestroy lifecycle functions. onDestroy is kind of the opposite of onMount, it is called just after the component is unmounted from the DOM.\nYou can also opt out of the automatic subscribe and unsubscribe by doing it yourself, which allow more control over it. Let see what it would have looked like:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  \u0026lt;!-- ManualSubscribeToMoney.svelte --\u0026gt; \u0026lt;script\u0026gt; import { money } from \u0026#39;./store.js\u0026#39; import { onDestroy } from \u0026#39;svelte\u0026#39; let money_value; // here we subscribe to \u0026#39;money\u0026#39; and assign it\u0026#39;s value to \u0026#39;money_value\u0026#39;  // each time \u0026#39;money\u0026#39; change, it send it\u0026#39;s new value to \u0026#39;money_value\u0026#39; to keep it up to date.  const unsubscribe = money.subscribe(value =\u0026gt; { money_value = value; }); // here we unsubscribe to \u0026#39;money\u0026#39; when the component is unmounted.  onDestroy(unsubscribe); \u0026lt;/script\u0026gt; \u0026lt;!-- and here we can use \u0026#39;money_value\u0026#39; instead of $money. --\u0026gt; \u0026lt;h1\u0026gt;You have {money_value} $!\u0026lt;/h1\u0026gt;   Because it\u0026rsquo;s much shorter to use the shorthand, I\u0026rsquo;ll use for the rest of the tutorial. But keep in mind of what it does behind the scene.\nWrite to the store (if the value is a writable) You can\u0026rsquo;t update the value of the store like this: $money += 1. You need to use the methods update or set. For example if you want to update the value of money to add 1:\n1 2  // n refer to the old value of money, and n + 1 will be the new value money.update(n =\u0026gt; n + 1)   And if you want to give a totally new value to it you can use set:\n1 2  // set money to the greatest number ever money.set(42)   For more information on the store: Svelte store tutorial first and later Svelte doc to have more information on Writable, Readable, derived store value and get().\nGoing back to our project Now that we know how to read and write to the store, we can update Building.svelte. We need to import the store, change every instance of money with $money and also change the way we change the value of money using update.\nWe are gonna declare a new function that will hide the fact that money is a store value.\n1 2 3 4  // update the value of `money` to the store, adding `n` to it. function updateMoney(n){ money.update(m =\u0026gt; m + n); }   But doing so, we need to rename the old updateMoney that was launching the setTimeout to launchSetTimeout. The name was not good before, and it is still not good, if you have any suggestion, I\u0026rsquo;ll gladly take it! And we can replace every instance where we add money += something; by updateMoney(something);. After all the transformation the code look like that (keeping only the parts that changed):\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46  \u0026lt;!-- Building.svelte--\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... import { money } from \u0026#39;./store.js\u0026#39;; // variable declarations  ... // reactive declarations  $: cantBuy = cost \u0026gt; $money; ... // function declarations \t// update the value of `money` to the store, adding `n` to it.  function updateMoney(n){ money.update(m =\u0026gt; m + n); } // update the values of `money` and `numberBuildings`  function updateNumbers(){ updateMoney(-cost); numberOfBuilding += 1 } // update `money` with `productionPerTick` and set a timeout to call itself after `tickSpeed` ms  function launchTimeout(){ updateMoney(productionPerTick); setTimeout(launchTimeout, tickSpeed); } // lifecycle functions  onMount(() =\u0026gt; { launchTimeout(); }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; ... \u0026lt;/style\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;p\u0026gt;Money: {$money}$\u0026lt;/p\u0026gt; ... \u0026lt;/button\u0026gt;   Now you can see that both the value of money in App.svelte and both Building.svelte is shared, but each building keep their numbers local otherwise.\n  Naming our building with props A very short step, now that we have many buildings, it could be nice to give them a name.\nBut remember that if we declare a variable inside a component, every instance of that component will have the same value for that variable. Not very helpful to have every building have the same name.\nWhat we need is called props. To draw an analogy, props are to a component what parameters are to a function. Props are used to initialize the component with some values. They are an essential building block because they allow to re-use component by giving them the flexibility they need.\nTo declare a prop, it\u0026rsquo;s like a variable declaration but with the keyword export added at the front of the declaration. And also we can replace on the template the reference to money with a reference to name.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u0026lt;!-- Building.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... // variable declarations  ... // prop declarations  export let name; // you can also give default value to your prop: export let name = \u0026#34;Producer\u0026#34;;  ... \u0026lt;/script\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;h3\u0026gt;{name}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} buildings bought, next one cost {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;You gain {productionPerTick}$ / tick.\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   And to define the prop value, you define it like an HTML attribute on the Building tag.\n1 2 3 4  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;Building name=\u0026#34;1th Derivative\u0026#34;\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;Combinatorics\u0026#34;\u0026gt;\u0026lt;/Building\u0026gt;   And here is the result:\n  Digging a bit about what props enable Using props will allow us to customize a little more each building.\nWe can now change many aspect of them like :\n their initial cost their initial number (we can imagine starting off with a few buildings already built after buying an upgrade) what they produce. Right now it\u0026rsquo;s money but they could produce another currency or even other buildings! what they cost. Their cost could be another currency, another building or a combination of those. (Or even cost tick, accelerating or slowing down the game a you buy this building) they could also have a maximum number of unit. (Example no more than 30 \u0026ldquo;Combinatorics\u0026rdquo; buildings and no limit for the \u0026ldquo;1th Derivative\u0026rdquo; building). And a lot more!  As a starting point, let\u0026rsquo;s change what they produce.\nBuilding producing proofs In the original Derivative Clicker game, the primary currency is money but there is a secondary currency named proofs that can be produced and is used to buy powerful buildings. (It is also one of the two element determining the amount of prestige currency you earn when you use the reset/prestige mechanic.).\nLet\u0026rsquo;s implement proof :)\nFor the same reason money was put into the store, we are gonna put proofs there too.\n1 2 3 4 5  /* store.js */ import { writable } from \u0026#39;svelte/store\u0026#39;; export const money = writable(20); export const proofs\t= writable(0);   We can then change the building component to replace explicit references to money to a generic currencyProduced that will can be either money or proofs.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  \u0026lt;!-- Building.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... // variable declarations  ... // props declaration  ... export let currencyProduced = money // By default, building will produce money  // reactive declarations  ... // function declarations  ... function updateCurrencyProduced(n){ currencyProduced.update(m =\u0026gt; m + n); } ... function launchTimeout(){ updateCurrencyProduced(productionPerTick); // change updateMoney to updateCurrencyProduced  setTimeout(launchTimeout, tickSpeed); } \u0026lt;/script\u0026gt;   Then to tie it up, in App.svelte we can import proofs from the store, and pass it as a prop to the building we want. (and update the display of the value as well).\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... import { money, proofs } from \u0026#39;./store.js\u0026#39;; ... \u0026lt;/script\u0026gt; \u0026lt;h1\u0026gt;You have {$money}$ and {$proofs} proofs!\u0026lt;/h1\u0026gt; \u0026lt;Building name=\u0026#34;1th Derivative\u0026#34;\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;Combinatorics\u0026#34; currencyProduced={proofs}\u0026gt;\u0026lt;/Building\u0026gt;   Because gave a default value to currencyProduced for buildings, we don\u0026rsquo;t need to use the prop for every building. But if we want to make it explicit, we can:\n1 2  \u0026lt;Building name=\u0026#34;1th Derivative\u0026#34; currencyProduced={money}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;Combinatorics\u0026#34; currencyProduced={proofs}\u0026gt;\u0026lt;/Building\u0026gt;   Note also that we did not need to import proofs into Building.svelte (and we only need to import money because we use it as the default value for currencyProduced). We just import it in App.svelte and pass either money or proofs to the buildings. Then we rely on the fact that every store object can be read with $ and updated with the update method. The only constraint is that what we give as a props to the buildings must be a writable store reference on a number (because we update it with + inside the building component). To relax this constraint, we could fire an event in the building component that could be handled in his parent component, updating the currency however it wants to. But this feel a bit heavy, and we won\u0026rsquo;t go this way (for now).\nFixing the UI Now our \u0026ldquo;Combinatorics\u0026rdquo; building produces proofs, but we still display that it produces money.\nWe could do a function with lots of if then else to display either \u0026ldquo;$\u0026rdquo; or \u0026ldquo;proof\u0026rdquo; or \u0026ldquo;proofs\u0026rdquo; or something else depending on what currency the building produce. Or we could add another prop to handle that. It means that we could have two building producing the same currency but displaying it differently. I\u0026rsquo;ll go with the first way of doing it because it will be quicker, but the second one is definitely more flexible (but I don\u0026rsquo;t think that will be needed).\nAnd because we are fixing the UI, we will also make it closer to Derivative Clicker. (at least for buildings)\nSo we want a function that will display the currency depending on what we produce. We will add it to a new file: utils.js because that function can be re-used in more than one component and is not tied to only one of them.\n1 2 3 4 5 6 7 8 9 10 11  /* utils.js */ import { money, proofs } from \u0026#39;./store.js\u0026#39;; function currencyToString(currency){ result = \u0026#34;?\u0026#34;; if (currency === money) result = \u0026#34;$\u0026#34;; else if (currency === proofs) result = \u0026#34;proofs\u0026#34; return result; };   I use a if else here, but a switch case will probably scale better in readability if we get a lot more cases to handle. We will see how that pan out.\nLet\u0026rsquo;s use that function in Building.svelte:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026lt;!-- Building.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... import { currencyToString } from \u0026#39;./utils.js\u0026#39;; ... \u0026lt;/script\u0026gt; ... \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;h3\u0026gt;{name}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{buildingProduction}{currencyToString(currencyProduced)}/tick: costs {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Owned:{numberOfBuilding} ({numberOfBuilding})\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   To get closer to the original game I changed buildingProductionPerTick to buildingProduction. Both information are useful, we could display both, but I\u0026rsquo;ll stick with the original design and display only buildingProduction.\nAlso I used \u0026lt;p\u0026gt;Owned:{numberOfBuilding} ({numberOfBuilding})\u0026lt;/p\u0026gt;. It seems weird right now, but we will edit it later when we implement building producing buildings. Then it will be \u0026lt;p\u0026gt;Owned:{numberOfBuildingTotal} ({numberOfBuildingBought})\u0026lt;/p\u0026gt;.\nIn App.svelte, we can use the function as well:\n1 2 3 4 5 6 7 8 9 10 11 12  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... import { currencyToString } from \u0026#39;./utils.js\u0026#39;; ... \u0026lt;/script\u0026gt; \u0026lt;h1\u0026gt;You have {$money}{currencyToString(money)} and {$proofs}{currencyToString(proofs)}!\u0026lt;/h1\u0026gt; ...   If you follow closely, you may have noticed that the currency for the cost of the building is still hardcoded as $ and not currencyToString(money). It\u0026rsquo;s because for now we have not looked into buying building with other currency than money. We will change it when times come to implement that feature.\nNote also that currencyToString() might possibly have been a component. (And that might have been a better implementation choice, I\u0026rsquo;m not sure). Try it out if you want!\nBuilding producing buildings Now that we have building producing proofs, what about buildings producing buildings?\nTo do that, we need to change a few things:\n in store.js we are gonna had new variables for each building we have so we can synchronize their number. in Building.svelte we need to use this new variable, and update it when needed. Be careful when updating as the new variable will be a writable, not a plain number. We will need to use $ to dereference the value and update()to update it. We also need to define new props to use those variables. in App.svelte we have to update the props and the template html to add the second level of buildings.  1 2 3 4 5 6 7 8 9 10  /* store.js */ ... // first level buildings export const firstDerivativeNum = writable(0); export const combinatoricsNum = writable(0); // second level buildings export const secondDerivativeNum = writable(0);   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38  \u0026lt;!-- Building.js --\u0026gt; \u0026lt;script\u0026gt; // import declarations  ... // variable declarations  let buildingProduction = 1; // $ produced per building per tick  let tickSpeed = 1000; // props declarations  export let name; export let currencyProduced = money; export let numberOfBuilding; // reactive declarations  ... $: cost = ($numberOfBuilding + 1) * 5; $: productionPerTick = $numberOfBuilding * buildingProduction; // function declaration  ... // update the values of `currencyProduced` and `numberBuildings`  function updateNumbers(){ updateMoney(-cost); numberOfBuilding.update(n =\u0026gt; n + 1); } ... \u0026lt;/script\u0026gt; ... \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;h3\u0026gt;{name}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{buildingProduction}{currencyToString(currencyProduced)}/tick: costs {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Owned:{$numberOfBuilding} ({$numberOfBuilding})\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  \u0026lt;!-- App.js --\u0026gt; \u0026lt;script\u0026gt; // import declarations import Building from \u0026#39;./Building.svelte\u0026#39;; import { money, proofs, firstDerivativeNum, secondDerivativeNum, combinatoricsNum } from \u0026#39;./store.js\u0026#39;; import { currencyToString } from \u0026#39;./utils.js\u0026#39;; // variable declarations // reactive declarations // function declarations // lifecycle functions \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;h1\u0026gt;You have {$money}{currencyToString(money)} and {$proofs}{currencyToString(proofs)}!\u0026lt;/h1\u0026gt; \u0026lt;Building name=\u0026#34;1th Derivative\u0026#34; numberOfBuilding={firstDerivativeNum}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;Combinatorics\u0026#34; currencyProduced={proofs} numberOfBuilding={combinatoricsNum}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;2nde Derivative\u0026#34; currencyProduced={firstDerivativeNum} numberOfBuilding={secondDerivativeNum}\u0026gt;\u0026lt;/Building\u0026gt;   Now that we have that, we can generate other buildings :)\nA little tweak to fix the UI again, the \u0026ldquo;2nd Derivative\u0026rdquo; building display a ? instead of the name of the building it produces. To fix that we need to update utils.js.\n1 2 3 4 5 6 7 8 9 10 11 12  /* utils.js */ import { money, proofs, firstDerivativeNum } from \u0026#39;./store.js\u0026#39; // Returns a string representing `currency`. If `currency` is not recognized, returns \u0026#39;?\u0026#39; export function currencyToString(c){ ... else if (c === firstDerivativeNum) result = \u0026#34; 1st Derivative\u0026#34; return result; }   To be fair, the UI needs a lot more fixing but it will do for now ;)\nBy doing this we introduced a bug feature with the costs of the buildings, if you start by buying a building that produces another building, this building\u0026rsquo;s costs will go up even so we did not buy any manually. We will fix this bug reverse this feature in the next tutorial when we will implement upgrades.\nRecap That\u0026rsquo;s it for this second part of the tutorial. Below is the full code we have so far.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  import Building from \u0026#39;./Building.svelte\u0026#39;; import { money, proofs, firstDerivativeNum, secondDerivativeNum, combinatoricsNum } from \u0026#39;./store.js\u0026#39;; import { currencyToString } from \u0026#39;./utils.js\u0026#39;; // variable declarations  // reactive declarations  // function declarations \t// lifecycle functions \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; \u0026lt;/style\u0026gt; \u0026lt;h1\u0026gt;You have {$money}{currencyToString(money)} and {$proofs}{currencyToString(proofs)}!\u0026lt;/h1\u0026gt; \u0026lt;Building name=\u0026#34;1th Derivative\u0026#34; numberOfBuilding={firstDerivativeNum}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;Combinatorics\u0026#34; currencyProduced={proofs} numberOfBuilding={combinatoricsNum}\u0026gt;\u0026lt;/Building\u0026gt; \u0026lt;Building name=\u0026#34;2nde Derivative\u0026#34; currencyProduced={firstDerivativeNum} numberOfBuilding={secondDerivativeNum}\u0026gt;\u0026lt;/Building\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70  \u0026lt;!-- Building.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  import { onMount } from \u0026#39;svelte\u0026#39;; import { money } from \u0026#39;./store.js\u0026#39;; import { currencyToString } from \u0026#39;./utils.js\u0026#39; // variable declarations  let buildingProduction = 1; // $ produced per building per tick  let tickSpeed = 1000; // props declarations  export let name; export let currencyProduced = money; export let numberOfBuilding; // reactive declarations  $: cantBuy = cost \u0026gt; $money; $: cost = ($numberOfBuilding + 1) * 5; $: productionPerTick = $numberOfBuilding * buildingProduction; // function declarations  // update the value of `currencyProduced` to the store, adding `n` to it.  function updateMoney(n){ money.update(m =\u0026gt; m + n); } // update the value of `currencyProduced` to the store, adding `n` to it.  function updateCurrencyProduced(n){ currencyProduced.update(m =\u0026gt; m + n); } // update the values of `currencyProduced` and `numberBuildings`  function updateNumbers(){ updateMoney(-cost); numberOfBuilding.update(n =\u0026gt; n + 1); } // update `currencyProduced` with `productionPerTick` and set a timeout to call itself after `tickSpeed` ms  function launchTimeout(){ updateCurrencyProduced(productionPerTick); setTimeout(launchTimeout, tickSpeed); } // lifecycle functions  onMount(() =\u0026gt; { launchTimeout(); }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; button { outline: 1px solid black; background: aliceblue; cursor: pointer; } button.cantbuy { background: #555; color: #DDD; cursor: default; } \u0026lt;/style\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;h3\u0026gt;{name}\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt;{buildingProduction}{currencyToString(currencyProduced)}/tick: costs {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Owned:{$numberOfBuilding} ({$numberOfBuilding})\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   1 2 3 4 5 6 7 8 9 10 11 12  /* store.js */ import { writable } from \u0026#39;svelte/store\u0026#39;; export const money = writable(20); export const proofs\t= writable(0); // first level buildings export const firstDerivativeNum = writable(0); export const combinatoricsNum = writable(0); // second level buildings export const secondDerivativeNum = writable(0);   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  /* utils.js */ import { money, proofs, firstDerivativeNum } from \u0026#39;./store.js\u0026#39; // Returns a string representing `currency`. If `currency` is not recognized, returns \u0026#39;?\u0026#39; export function currencyToString(c){ let result = \u0026#34;?\u0026#34;; if (c === money) result = \u0026#34;$\u0026#34;; else if (c === proofs) result = \u0026#34; proofs\u0026#34; else if (c === firstDerivativeNum) result = \u0026#34; 1st Derivative\u0026#34; return result; }   And below you can see the result:\n  Objectives for the next parts There are quite a few things to implement still:\n Update the stats recap at the top Make buildings have varying costs Upgrades for our buildings Prestige layer Options (Save, Export Save, Load Save, Stats, number formatting Balancing the game  We will continue in the next part:part3: Adding upgrades to the game.\nYou can also play with the project in the Svelte REPL or play the game made so far (hosted by Surge) .\n  https://github.com/Day8/re-frame \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://www.julienrouse.com/blog/tutorial-for-idle-game-svelte-part2/","tags":["svelte","SPA","game","tutorial","idle","serie-svelte"],"title":"Tutorial for an Idle game with Svelte (Part2)"},{"categories":null,"contents":"Webpack-cli crashes for Windows users, but only on Monday It seems like a headline from the Onion1. But unfortunately it\u0026rsquo;s not.\nWebpack-cli2 had a bug3 recently because it tried to display a message for donations on the terminal when using it. But that message was only displayed on Monday(because there were complaints about seeing the donation message every time you were running a build).\nThen a bug was introduced into that code because it relies on process.getuid  which is not available on Windows, making the CLI crash but only on Windows and on Monday \\(**)/.\nSimilar story If you like weird bug story, you can also read:\n Crashes only on Wednesday Cannot print on Tuesday! The 500-mile mail    https://www.theonion.com/ \u0026#x21a9;\u0026#xfe0e;\n https://github.com/webpack/webpack-cli \u0026#x21a9;\u0026#xfe0e;\n https://github.com/webpack/webpack-cli/issues/962 \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://www.julienrouse.com/blog/webpack-cli-crashes-only-on-monday/","tags":["short","bug","webpack","webpack-cli","not-the-onion","javascript"],"title":"Webpack-cli crashes only on Monday"},{"categories":null,"contents":"Making a Derivative Idle clone with Svelte This is the first part of a multi part tutorial on making a game with Svelte1. (If you have not read it already, I made an introduction to Svelte you can find right below).\n introduction to Svelte part1: Start of the tutorial: making a Derivative Idle clone with Svelte part2: Going further with Svelte using components and props part3: Adding upgrades to the game  Tutorial Let\u0026rsquo;s start the Derivative Clicker2 tutorial :) I\u0026rsquo;ll try to introduce concept as they come but you are expected to already know a bit of HTML, CSS and some programming concepts like variables, functions, loop and recursion.\nFor the following tutorial I\u0026rsquo;ll use the Svelte REPL3 but you can also follow instructions on the Svelte Getting Started4 page to set yourself up with your favorite editor.\nDisclaimer A little word of warning, it\u0026rsquo;s my first Svelte project so I may do things that are not optimal.\nAlso I will write some invalid HTML (invalid as in not W3C compliant) to not have to use CSS until the very end of the tutorial because it\u0026rsquo;s not the focus of this project. I will take care of pointing out when I take those shortcuts.\nAnd also my English is far from perfect so hit me up with a message at contact AT julienrouse.com when you see an error so I can correct it and try to learn from my mistake to not do it again!\nIntroduction to the game and scope of the tutorial What is Derivative Clicker Before trying to create a copy of a game, lets talk a bit about what is the essence of this particular game. Derivative Clicker is an idle game. The idle genre resolve around making a number go big, usually by buying things that generate some form of currency. Then with that currency you can buy more stuff that generate more currency. There is usually no end game, just the pleasure to see your number grow bigger and bigger (until the browser can\u0026rsquo;t display your number because it\u0026rsquo;s too big :) ). Sometimes the game continue to generate currency even when you are not online but not always (not in this case).\nHere you start with no cash and when you click on a button you gain some cash. Then after clicking a few times, with your hard earned cash you can buy something (I\u0026rsquo;ll call it \u0026ldquo;building\u0026rdquo; in the rest of the tutorial) that will generate a little bit of cash every tick. There is a tick every 1000ms (1 second) but as you progress, ticks can go faster, accelerating production. Then as you go further into the game, you can buy more buildings that generate either more cash or more buildings. (Like Russian dolls, there is always an extra layer).\nYou can also buy upgrades for your buildings that will make then more efficient, less costly or upgrades that will simulate clicks. (And some games have more elaborate ways of upgrading the game).\nAlso because the cost of buildings will grow exponentially but the growth of cash production will be less than exponential, at some point we will hit a time wall where we can\u0026rsquo;t buy new buildings before a long time. That is where reset comes in. The reset (or prestige) mechanic allow you to reset the game entirely from the start. But why would you do that? Because resetting gives you some form of bonus that helps you progress further into the game. Some elaborate games features more than one prestige layer. For our case, prestige gives us prestige currency that gives a percentage bonus to our building production. How many prestige currency you get depends on how big your numbers are at the time you reset. The prestige currency is also used to buy some powerful upgrades (for example unlocking new buildings) that allow to progress further. So you have to balance keeping the prestige currency for it\u0026rsquo;s production boost or spending it to gain other bonuses.\nWhat we will aim for  Create buildings that generate cash Create buildings that generate other currencies Create buildings that generate other buildings Have some upgrades Have some form of prestige mechanic Have some form of statistics for the game Use Svelte :) And discover its many features  Also note that you can peak at the source code of the game (itself forked from here). For this tutorial we won\u0026rsquo;t follow this code, but create a game similar to it from scratch.\nHello World The first line \u0026lt;!-- App.svelte --\u0026gt; is to indicate the name of the file, here App.svelte and it\u0026rsquo;s just for the tutorial. You do not need to include that line in your project, it\u0026rsquo;s for helping you follow along the tutorial.\n1 2 3 4 5 6  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; let name = \u0026#39;world\u0026#39;; \u0026lt;/script\u0026gt; \u0026lt;h1\u0026gt;Hello {name}!\u0026lt;/h1\u0026gt;   File ending in .svelte are kind of like .html. They are mostly composed of HTML tags and components. (We will see after how to define our own components).\nYou can also define some logic inside \u0026lt;script\u0026gt;\u0026lt;/script\u0026gt; and reference it inside the html template. Above we declared a variable name and gave it the value \u0026quot;world\u0026quot;. Then inside the template we reference it with the syntax {name} to inject its value.\nIf you use the REPL, you should see on the right side in the result pane a big bold Hello world!.\n  Creating the first building If you recall the little introduction on idle games, building are things that you can buy and then they generate something every tick. (or every X tick, or twice per tick or whenever. Here we will start by producing money every tick.)\nSo for this first step we need to:\n keep track of cash (our primary currency) keep track of how many numbers of building we bought (cause the price of the building depends on the number of building, and how much cash is generated each tick is also dependent on how many buildings there are). create a function that will be used every tick (to gain currency)  Let\u0026rsquo;s keep track of cash in our game : let money = 20 and start with 20 units of it. And by modifying a bit the Hello World example, you can show the amount of money.\n1 2 3 4 5 6  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; let money = 20; \u0026lt;/script\u0026gt; \u0026lt;h1\u0026gt; You have {money} $ \u0026lt;/h1\u0026gt;   Next to represent a building, we will use a button. If you click on it, you buy it, deducting its price from your money.\nWe need two variables: one for the price and one for the number of building bought:\n1 2 3 4 5 6  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; let money = 20; let cost = 5; let numberOfBuilding = 0; \u0026lt;/script\u0026gt;   And then we can use those variable in the template with curly braces syntax {} we saw earlier:\n1 2 3 4  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;button\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} building bought, next one cost {cost}$\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   So far so good :)\nNow we need to actually do something when we click on the button.\nBuying a building with event and event handler We add an event handler to do something when you click on the button. In Svelte you can intercept any event with on: followed by the event name. Here the event is click so we use on:click={clickHandler}. clickHandler is a function that is called when a click is registered. For example:\n1 2 3 4  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;button on:click={()=\u0026gt;alert(\u0026#39;The button was clicked\u0026#39;)}\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} building bought, next one cost {cost}$\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   Will trigger a JS alert each time the button is clicked.\nIn our case we want to update our cash, the number of building and the cost of the next building. Let\u0026rsquo;s define a function updateNumbers that do exactly that. *Note that for now we use a linear growth function to calculate building cost, but usually idle games define a cost with exponential growth. We will change that later.\n1 2 3 4 5 6 7 8 9 10 11 12 13  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; let money = 20; let cost = 5; let numberOfBuilding = 0; // function called when clicking on the building button  function updateNumbers(){ money -= cost; //shorthand for money = money - cost \tnumberOfBuilding += 1 //numberOfBuilding = numberOfBuilding + 1 \tcost = (numberOfBuilding + 1) * 5; }\t\u0026lt;/script\u0026gt;   And the template for the button:\n1 2 3 4  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;button on:click={updateNumbers}\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} building bought, next one cost {cost}$\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   This seems to works :) But if you click more than three times on the button you will see that our money goes into negative value :( We need to restrict buying only when we have enough money.\n  Restrict buying building only when we have the money What we want is to block the button when we have less money than the cost. We could write it that way:\n1 2 3 4  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;button on:click={updateNumbers} disabled=\u0026#34;{cost \u0026gt; money}\u0026#34;\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} building bought, next one cost {cost}$\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   But maybe we will need the boolean condition cost \u0026gt; money in other places as well, and it is better not to repeat many times the same logic (see DRY principle). If later on we need to change it, we\u0026rsquo;d have to find all the places we used it. (Spoiler alert: we will need to have that condition in more than one place, and we will also need to change it slightly later). To solve that little problem, we are going to use reactive declarations5.\nRefactoring using reactive declarations Reactive declarations are a way to declare variable that depends on other variables. When the value of the variables they depend on change, their own value will be recomputed (they react to change hence the name).\nHere we are going to write one such reactive declaration\n1 2 3 4 5 6 7 8  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; ... // here goes the code for the variable declarations  $: cantBuy = cost \u0026gt; money ... // here goes the rest of the code \u0026lt;/script\u0026gt;   And now we can use it in our button:\n1 2 3 4  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;button on:click={updateNumbers} disabled={cantBuy}\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} bought, next one cost {cost}$\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   Below you can see the result, we can no longer click on the button when we can\u0026rsquo;t afford it.\n  Another place we can use reactive declarations is with the cost variable. Remember that to update the cost we used cost = (numberOfBuilding + 1) * 5;. That too can be expressed as a reactive declaration.\n1 2 3 4 5 6 7 8 9 10 11  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; //instead of let cost = 5, replace it by  $: cost = (numberOfBuilding + 1) * 5; //change the updateNumbers function  function updateNumbers(){ money -= cost; numberOfBuilding += 1 } \u0026lt;/script\u0026gt;   We no longer need to update the cost here, reactive declaration does it for us when we update numberOfBuilding.\nMid tutorial recap Let\u0026rsquo;s have a look at the full code until now and see how far we got.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; let money = 20; let numberOfBuilding = 0; // Reactive declarations  $: cantBuy = cost \u0026gt; money; $: cost = (numberOfBuilding + 1) * 5; // function called when clicking on the building button  function updateNumbers(){ money -= cost; //shorthand for money = money - cost \tnumberOfBuilding += 1 //numberOfBuilding = numberOfBuilding + 1  }\t\u0026lt;/script\u0026gt; \u0026lt;h1\u0026gt;You have {money} $!\u0026lt;/h1\u0026gt; \u0026lt;button on:click={updateNumbers} disabled={cantBuy}\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} bought, next one cost {cost}$\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   We can buy buildings, can\u0026rsquo;t buy them when we don\u0026rsquo;t have the money. We need now to make them generate money!\nMaking buildings generates money To do that, we need to trigger a function every X millisecond. In JS we can use setTimeout.\nWe will declare a tickSpeed variable that will be the X for the interval for setTimeout. Later on it will allow us to increase or decrease (mostly decrease) the value of tickSpeed to accelerate the game.\nWe will also declare a variable buildingProduction to represent how much money each building produce every tick.\nAnd last we declare a new function updateMoney that will update the amount of money we have and trigger a timeOut to get called again after tickSpeed milliseconds.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; ... //variable declarations  let tickSpeed = 1000 // tickSpeed is expressed in ms  let buildingProduction = 1; // $ produced per building per tick  ... //reactive declarations  // functions declaration  function updateMoney(){ money += numberOfBuilding * buildingProduction; setTimeout(updateMoney, tickSpeed); } updateMoney(); // Call the function to start the update loop.  \u0026lt;/script\u0026gt;   And voilà! Now when you buy buildings, you should see the money going up each second!\nChanges to the UI For the first part of the tutorial we implemented all the feature we planned to but we could add some visual changes.\nAdd more stats Now that we earn money each tick, wouldn\u0026rsquo;t that be nice to see how much we earn?\nIn the template we can just add \u0026lt;p\u0026gt;You gain {numberOfBuilding * buildingProduction}$ / tick.\u0026lt;/p\u0026gt; to have more information:\n1 2 3 4  \u0026lt;button on:click={updateNumbers} disabled={cantBuy}\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} buildings bought, next one cost {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;You gain {numberOfBuilding * buildingProduction}$ / tick.\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   NOTE: yes I inserted two \u0026lt;p\u0026gt; inside the \u0026lt;button. It is not the recommended way to make two lines of text one below the other in a button but for now it will do. (I checked a w3c validator6 and indeed it is not valid.)\nNow you can test it, buy a couple buildings and you\u0026rsquo;ll see how much money you get each tick.\nBut by doing that, we introduced some redundancy. We used numberOfBuilding * buildingProduction which is already used in the function updateMoney. We can utilize a reactive declaration again to not repeat this operation in multiple place, and also replace it in the code in all the places it was used.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // variable declarations  ... // reactive declarations  ... $: productionPerTick = numberOfBuilding * buildingProduction; // function declarations  ... function updateMoney(){ money += productionPerTick; setTimeout(updateMoney, tickSpeed); } \u0026lt;/script\u0026gt; ... \u0026lt;button on:click={updateNumbers} disabled={cantBuy}\u0026gt; ... \u0026lt;p\u0026gt;You gain {productionPerTick}$ / tick.\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   But when you replace everything that way, you get an error: can't access lexical declaration 'productionPerTick' before initialization. What is means it that we try to use productionPerTick (which rely on other variables) before Svelte has even initialized those variables.\nTo resolve this problem, we will have to use some lifecycle functions.\nIntroducing lifecycle functions: onMount Svelte (like React and Angular) provides function that you can redefine to customize the comportment of the components.\nHere we can use onMount to only call the function updateMoney (and consequently use productionPerTick) only once Svelte has been initialized. (Or rather, once Svelte has initialized the App component).\nTo be able to use onMount we need to import it first.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // imports declaration  import { onMount } from \u0026#39;svelte\u0026#39;; // variable declarations  ... // reactive declarations  ... // function declarations  ... // lifecycle functions  onMount(() =\u0026gt; { updateMoney(); }); \u0026lt;/script\u0026gt;   Once we do that the error disappear and the application works again. :)\nFor more information on onMount and other lifecycle functions, see the documentation and the onMount tutorial.\nAdding some visual cues And to finish this tutorial, let\u0026rsquo;s add some visual cues for the button.\nWe are going to change the background color for the button and change the mouse cursor depending on if we can buy it or not.\nWe can style elements directly into our .svelte files with the \u0026lt;style\u0026gt; tag. We are defining a default style for the \u0026lt;button\u0026gt; tag then a style for \u0026lt;button\u0026gt; that has the cantbuy class\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; ... \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; button { outline: 1px solid black; background: aliceblue; cursor: pointer; } button.cantbuy { background: #555; color: #DDD; cursor: default; } \u0026lt;/style\u0026gt;   Then we need to add this cantbuy class to the \u0026lt;button\u0026gt; only when we cannot buy it. Luckily we can re-use the reactive declaration cantBuy.\n1 2 3 4  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; ... \u0026lt;/button\u0026gt;   Here class:cantbuy={cantBuy} means Svelte will add the class cantbuy to the element only when the variable cantBuy is true. You can also write it with a ternary expression: class={cantBuy ? 'cantbuy' : ''}.\nConclusion This close the first part of this tutorial.\nBelow is the full code:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56  \u0026lt;!-- App.svelte --\u0026gt; \u0026lt;script\u0026gt; // import declarations  import { onMount } from \u0026#39;svelte\u0026#39;; // variable declarations  let money = 20; let numberOfBuilding = 0; let buildingProduction = 1; // $ produced per building per tick  let tickSpeed = 1000; // reactive declarations  $: cantBuy = cost \u0026gt; money; $: cost = (numberOfBuilding + 1) * 5; $: productionPerTick = numberOfBuilding * buildingProduction; // function declarations  // update the values of `money` and `numberBuildings`  function updateNumbers(){ money -= cost; numberOfBuilding += 1 } // update `money` with `productionPerTick` and set a timeout to call itself after `tickSpeed` ms  function updateMoney(){ money += productionPerTick; setTimeout(updateMoney, tickSpeed); } // lifecycle functions  onMount(() =\u0026gt; { updateMoney(); }); \u0026lt;/script\u0026gt; \u0026lt;style\u0026gt; button { outline: 1px solid black; background: aliceblue; cursor: pointer; } button.cantbuy { background: #555; color: #DDD; cursor: default; } \u0026lt;/style\u0026gt; \u0026lt;h1\u0026gt;You have {money} $!\u0026lt;/h1\u0026gt; \u0026lt;button on:click={updateNumbers} class:cantbuy={cantBuy} disabled={cantBuy}\u0026gt; \u0026lt;p\u0026gt;{numberOfBuilding} buildings bought, next one cost {cost}$.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;You gain {productionPerTick}$ / tick.\u0026lt;/p\u0026gt; \u0026lt;/button\u0026gt;   You can play with the example in the Svelte REPL yourself.\nYou can also play the game we made so far here (hosted by Surge7).\nTo continue the tutorial, part2: Going further with Svelte using components and props :) We will build more than one building, create components to isolate our logic around buildings and continue to implement the game mechanics.\n  https://svelte.dev/ \u0026#x21a9;\u0026#xfe0e;\n http://gzgreg.github.io/DerivativeClicker/ \u0026#x21a9;\u0026#xfe0e;\n https://svelte.dev/repl/hello-world?version=3.5.1 \u0026#x21a9;\u0026#xfe0e;\n https://svelte.dev/blog/the-easiest-way-to-get-started \u0026#x21a9;\u0026#xfe0e;\n https://svelte.dev/tutorial/reactive-declarations \u0026#x21a9;\u0026#xfe0e;\n https://validator.w3.org \u0026#x21a9;\u0026#xfe0e;\n https://surge.sh/ \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://www.julienrouse.com/blog/tutorial-for-idle-game-svelte-part1/","tags":["svelte","SPA","game","tutorial","idle","serie-svelte"],"title":"Tutorial for an Idle game with Svelte (Part1)"},{"categories":null,"contents":"Introduction to Svelte I wanted to try out Svelte1 so I made a little clone of a game called Derivative Clicker2. Following is a very quick presentation of what is Svelte (and how it compares to other reactive framework like React3, Angular4, etc) then a multi part tutorial on how to make a little game app with Svelte.\n introduction to Svelte part1: Start of the tutorial: making a Derivative Idle clone with Svelte part2: Going further with Svelte using components and props part3: Adding upgrade to the game  Svelte Svelte is in competition with React, Angular and other framework to build reactive Single Page Application, but the difference is Svelte shifts the work from the browser to the compiler. It still delivers Reactive Single page application but with a very reduced size. Similar initiative can be found as well with Aurelia5.\nThe project went to version 3 a month ago (early may 2019), I think it\u0026rsquo;s a good time to try it out :)\nPROS The Svelte tutorial6 is great, it takes about an hour or so and is very well done. It uses the Svelte REPL7 and it introduces concepts very smoothly. Also it uses mostly the same concepts as React, Vue8 and Angular. If you know at least one of those you should pick it up quickly. (Component, reactive bindings, props, event forwarding, state store, component life cycle and slots to name a few concepts used) .\nAlso the Svelte website features a very nice REPL that you can use to test Svelte app without installing anything. When you are ready for the next step, the get started section9 is handy. It\u0026rsquo;s just a matter of cloning a template from a git10 repository and use the tools you are used to: npm11 or yarn12, webpack13, rollup14 or browserify15. And for the deployment, there are instructions a quick setup with Now16 and Surge17 or you can choose you favorite deployment option as you would for any other JS or TypeScript project.\nAnother pro, look at this article for a RealWorld benchmark to get a feel of how Svelte can be very slim compared to its rivals. (Note that the benchmark was done with Svelte v2, and right now it is already Svelte v3, so take it with a grain of salt).\nCONS I think it got traction recently but it still is not widely used so there not much educational material yet. If you can\u0026rsquo;t do with only the official tutorial and API documentation, you should wait a bit more.\nAlso Svelte miss features like routing (but this is apparently addressed in the sister framework Sapper18 which aims to be a replacement for Next.js19).\nAnd last but not least, it has some weird syntax choices. The dollar sign $ has two different uses dependent on the context.\n1 2  let count = 0; $: doubled = count * 2; // here doubled is a \u0026#39;derived\u0026#39; value on \u0026#39;count\u0026#39;, it will automatically recalculate itself if count changes   1 2  \u0026lt;p\u0026gt;My name is {$name}\u0026lt;/p\u0026gt; \u0026lt;!-- Here $name is a reference to name, a value in a state store --\u0026gt;   I don\u0026rsquo;t like that choice. Note also that the second syntax is a shorthand syntax, you can subscribe manually to values in the store and name them without the $ so if you really care about that you can opt out (at the price of 3-4 lines of manual wiring).\nAnd syntax for conditional in template is also not very sexy:\n1 2 3  {{ #if condition }} \u0026lt;p\u0026gt;Inside the if\u0026lt;/p\u0026gt; {{ /if}}   But I guess it\u0026rsquo;s more a matter of personal taste.\nPracticing Svelte by building a game To continue onto the first part of the tutorial you can follow this link: Start of the tutorial: making a Derivative Idle clone with Svelte\n  https://svelte.dev/ \u0026#x21a9;\u0026#xfe0e;\n http://gzgreg.github.io/DerivativeClicker/ \u0026#x21a9;\u0026#xfe0e;\n https://reactjs.org/ \u0026#x21a9;\u0026#xfe0e;\n https://angular.io/ \u0026#x21a9;\u0026#xfe0e;\n https://aurelia.io/ \u0026#x21a9;\u0026#xfe0e;\n https://svelte.dev/tutorial/basics \u0026#x21a9;\u0026#xfe0e;\n https://svelte.dev/repl/hello-world?version=3.5.1 \u0026#x21a9;\u0026#xfe0e;\n https://vuejs.org/ \u0026#x21a9;\u0026#xfe0e;\n https://svelte.dev/blog/the-easiest-way-to-get-started \u0026#x21a9;\u0026#xfe0e;\n https://git-scm.com/ \u0026#x21a9;\u0026#xfe0e;\n https://www.npmjs.com/ \u0026#x21a9;\u0026#xfe0e;\n https://yarnpkg.com/en/ \u0026#x21a9;\u0026#xfe0e;\n https://webpack.js.org/ \u0026#x21a9;\u0026#xfe0e;\n https://rollupjs.org/guide/en/ \u0026#x21a9;\u0026#xfe0e;\n http://browserify.org/ \u0026#x21a9;\u0026#xfe0e;\n https://zeit.co/now \u0026#x21a9;\u0026#xfe0e;\n https://surge.sh/ \u0026#x21a9;\u0026#xfe0e;\n https://sapper.svelte.dev/ \u0026#x21a9;\u0026#xfe0e;\n https://github.com/zeit/next.js \u0026#x21a9;\u0026#xfe0e;\n   ","permalink":"https://www.julienrouse.com/blog/introduction-to-svelte/","tags":["svelte","SPA","serie-svelte"],"title":"Introduction to Svelte"},{"categories":null,"contents":"Professional Scrum Developer certification post-mortem I\u0026rsquo;m not sure post-mortem is the right expression.\nAnyway, a few weeks ago I obtained the PSD1 certification from scrum.org and this is a recap on my learning experience. Also at the end there are tips for you if you want to try it as well!\nDisclaimer about certifications Certifications are a cash cow for the very lucrative professional training industry, no doubts. Some certifications are good, some are bad, some are total scams. And they are not well received in all organizations. Nevertheless sometimes they hold some value (even if it is only the value of motivating you to learn new things in exchange of a useless shiny piece of (electronic) paper.)\nAs for PSD1, I have no idea which category it belongs to. It definitely is worth it if your employer pay for it or if it enable a raise and/or enable you to have access to more job opportunities (or mission opportunities for consultants).\nMotivations I had some spare time at work between missions so in parallel with getting myself up to date with front-end technologies (Flutter, Dart, NativeScript), I spent some times learning and training myself for this certification.\nWhat I was hoping to get out of it:\n Getting access to mission needing Agile/Scrum experience. I had some exposure to Scrum and Kanban during a 8 weeks summer job in an web agency in the past (using Java, Spring and some JavaScript and jQuery) but a few times this year it was not enough to be selected for that mission. Actually learning more about Scrum. As it turns out, I knew already most of the topics covered (more than what I anticipated).  As bonus motivation, I had the privilege to have my colleague Nathalie (a very experienced Agile coach) give me a training session on Scrum and Agility and when she was at the office she took the time to answer my questions which was very very valuable! Thanks very much to her!\nMy journey I first started practicing for this test back in October 2018.\nI read the Scrum Guide in French, then practiced with the quiz on scrum.org (they call it \u0026ldquo;Open Assessments\u0026rdquo;) at least four times a day. I was doing mostly the \u0026ldquo;Scrum Developer Open\u0026rdquo; one, but also the \u0026ldquo;Scrum Open\u0026rdquo; which is more generalist.\nOne caveat was that both the open assessments and the real test are in English and I had prepared in French. Most of the terms were understandable but sometimes I got confused and I began again reading and studying the Scrum Guide in English.\nWhen my mission started I kept practicing, doing two to three quiz in the evening when I got home. I kept doing it for three weeks. After all that, I was scoring consistently above 95% (passing grades are 80%) so I was feeling pretty confident.\nBut then life happened, I stopped taking time for training and I stopped practicing altogether.\nIt\u0026rsquo;s only in the beginning of May 2019 that I came back to the certification (and after having completed a Coursera course \u0026ldquo;Learning how to learn\u0026rdquo; which gives some insight on how to learn more effectively). It was a good surprise to me when I started doing practice tests again that I still remembered a lot of the material and started scoring above 90% right away. In retrospective and with what I learned in the Coursera course, I think I remembered so much because I spaced my learning over the span of many weeks, and I took a lot of practice test. Both are good ways to enhance retention in long term memory.\nThen after only a few day of being back to practice, I decided to attempt the certification. I was feeling ready and scored 100% at every test attempt for two days straight.\nThe exam The exam is 80 questions, 60 minutes and you need 85% to pass (at most 12 errors allowed). It cost also 200$USD (269$CAD at the time I bought it), which is not a lot for a certification but still enough for being motivated to not screw it up.\nAnd my impression on it was that it was hard! After acing every test I thought it would be a piece of cake but not at all.\nWhile the exam focus on majority on what the practice exam test you on, there are also questions relevant to a Product Owner or a Scrum Master role in the scrum team. I did not prepare very well for Scrum Master nor Product Owner questions (out of all the tests I did, only 3 or 4 were about Scrum Master and 1 only about Product owner) because in the certification details they said to prepare with the 2 open assessments I used. It was a bad move on my part.\nIn the end, my two months summer job in a scrum team in 2012 helped me figure out some of the \u0026ldquo;hard\u0026rdquo; questions, and I passed the exam successfully.\nIf there is one lesson to remember here: When preparing for any kind of exam, don\u0026rsquo;t prepare exclusively for the subject matter, open your perspective and learn more than what is expected. Also a side benefit is that you actually gain more knowledge and over the course of many months/years, it can be really significant to have pushed for a little more knowledge in term of your global comprehension.\nTips for earning the PSD1 certificate  Do a lot of open assessments: Scrum Developper Open and Scrum Open Read the Scrum Guide (I recommend in English because the exam is exclusively in English) Do a lot of open assessments again: Scrum Developper Open, Scrum Open and also Product Owner Open and Nexus Open Space out your learning, try to do it a little bit every day for at least 2-3 weeks instead of cramming all practice in 1-2 days. You might be able to take the exam successfully if you cram, but you won\u0026rsquo;t build long term memories about what you learn. And while having the certification is great, gaining the knowledge for a long time is more important. Read books and articles about Scrum, Agility, TDD, refactoring, Continuous Integration, Continuous Deployment, and more! The Agile Manifesto is a good start, then look at the Suggested Read List for PSD on scrum.org. (Mind that most of those are affiliate links.) If you have experienced scrum practitioners around you available to help you, jump on the occasion. As with most discipline, the insights of an experienced peer can really help you increase your knowledge very quickly.  Additionally if you have the means, there are training sessions but it is very expensive. A 3 day session in Ottawa for preparing PSD is approximatively 2000$CAD (1482$USD at the time of writing). O_O\nThere are also other website offering training sessions as an alternative if you want to shop for a better price.\nMy opinion on training for PSD is that it is probably not worth it (even if your employer pays for it) as the learning material is very abundant and the open assessments gives you 75% of what you need to know.\nBragging :)   ","permalink":"https://www.julienrouse.com/blog/professional-scrum-developer-certification-post-mortem/","tags":["certification","scrum","scrum.org","post-mortem"],"title":"PSD1 certification post-mortem"},{"categories":null,"contents":"A Reddit bot that read posts and comments from a subreddit, tokenize them and output a wordcloud. The shape of the wordcloud can be configured.\nIt is a very small project, was one of my first \u0026ldquo;real-world\u0026rdquo; project using a third-party API.\n","permalink":"https://www.julienrouse.com/projects/creations/reddit_bot/","tags":["python","nltk","praw","reddit","bot","python","readthedocs.io","wordcloud"],"title":"Reddit bot to make a wordcloud"},{"categories":null,"contents":"This file exists solely to respond to /search URL with the related search layout template.\nNo content shown here is rendered, all content is based in the template layouts/page/search.html\nSetting a very low sitemap priority will tell search engines this is not important content.\nThis implementation uses Fusejs, jquery and mark.js\nInitial setup Search depends on additional output content type of JSON in config.toml\n1 2  [outputs] home = [\u0026#34;HTML\u0026#34;, \u0026#34;JSON\u0026#34;]   Searching additional fields To search additional fields defined in front matter, you must add it in 2 places.\nEdit layouts/_default/index.JSON This exposes the values in /index.json i.e. add category\n1 2 3 4 5 6  ... \u0026#34;contents\u0026#34;:{{ .Content | plainify | jsonify }} {{ if .Params.tags }}, \u0026#34;tags\u0026#34;:{{ .Params.tags | jsonify }}{{end}}, \u0026#34;categories\u0026#34; : {{ .Params.categories | jsonify }}, ...   Edit fuse.js options to Search static/js/search.js\n1 2 3 4 5 6  keys: [ \u0026#34;title\u0026#34;, \u0026#34;contents\u0026#34;, \u0026#34;tags\u0026#34;, \u0026#34;categories\u0026#34; ]   ","permalink":"https://www.julienrouse.com/search/","tags":null,"title":"Search Results"}]