<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>short on I break things often. Sometimes I manage to fix them</title>
    <link>https://www.julienrouse.com/tags/short/</link>
    <description>Recent content in short on I break things often. Sometimes I manage to fix them</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Feb 2024 19:00:00 +0000</lastBuildDate>
    
        <atom:link href="https://www.julienrouse.com/tags/short/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Print the Go syntax representation of a value</title>
      <link>https://www.julienrouse.com/blog/print-the-go-syntax-representation-of-a-value/</link>
      <pubDate>Thu, 15 Feb 2024 19:00:00 +0000</pubDate>
      
      <guid>https://www.julienrouse.com/blog/print-the-go-syntax-representation-of-a-value/</guid>
      <description>&lt;p&gt;I learned a new trick: &lt;code&gt;fmt.Sprintf&lt;/code&gt; (and &lt;code&gt;fmt.Printf&lt;/code&gt;) support a format verb &lt;code&gt;%#v&lt;/code&gt; that prints out a &amp;ldquo;Go-syntax representation of the value&amp;rdquo; (quoting the documentation).&lt;/p&gt;
&lt;p&gt;What this mean: you can ouput a value the way you would write it in valid Go source code.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Go&#34; data-lang=&#34;Go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {

	&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt; = []&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;string in the slice&amp;#34;&lt;/span&gt;}

	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// output: [string in the slice]
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%#v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// output: []string{&amp;#34;string in the slice&amp;#34;}
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#75715e&#34;&gt;// To output only the type, you can use `%T` instead
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%T\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;s&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// output: []string
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;why-is-it-useful&#34;&gt;Why is it useful?&lt;/h2&gt;
&lt;p&gt;For me it was useful when using Go template to generate Go code (generating CLI commands from OpenAPI specification).&lt;/p&gt;
&lt;p&gt;In my input file, I had a slice I wanted to insert into the generated code, but I can&amp;rsquo;t use the value directly, because it&amp;rsquo;s not valid Go code. There is a few workaround (like iterating on the slice to output each value inside and reconstructing the slice) but using &lt;code&gt;%#v&lt;/code&gt; is by far the best approach.&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Documentation for &lt;a href=&#34;https://pkg.go.dev/text/template&#34;&gt;text/template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Documentation for &lt;a href=&#34;https://pkg.go.dev/fmt&#34;&gt;fmt&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Some thoughts about documentation</title>
      <link>https://www.julienrouse.com/blog/some-thoughts-about-documentation/</link>
      <pubDate>Tue, 21 Dec 2021 19:00:00 +0000</pubDate>
      
      <guid>https://www.julienrouse.com/blog/some-thoughts-about-documentation/</guid>
      <description>&lt;p&gt;Writing down a few thoughts about documentation, as I realized a few things in the past two years that I did not write down yet, so here we go.&lt;/p&gt;
&lt;h2 id=&#34;knowing-the-audience&#34;&gt;Knowing the audience&lt;/h2&gt;
&lt;p&gt;As software developers, we write documentation but we don&amp;rsquo;t often reflect on who is targeted by the documentation. Sometimes, it&amp;rsquo;s the end user that will read it, sometimes it&amp;rsquo;s a colleague from another team, sometimes it&amp;rsquo;s a non-technical person, sometimes it&amp;rsquo;s us in the future.&lt;/p&gt;
&lt;p&gt;Depending on who is the most likely reader, we should adapt how we write. A user and/or non-technical person does not need internal or technical details about the system, but might need a glossary, a tutorial and non-technical vocabulary.&lt;/p&gt;
&lt;p&gt;On the other end, for technical colleagues or for ourselves, we can probably skip the glossary, and we probably wants to dig deeper in details, because that is usually what matters most.&lt;/p&gt;
&lt;h2 id=&#34;knowing-the-needs-of-the-audience&#34;&gt;Knowing the needs of the audience&lt;/h2&gt;
&lt;p&gt;Related but not quite the same, the same user can come to your documentation multiple time with multiple needs. One time he needs a &amp;ldquo;getting started&amp;rdquo; section to get up to speed quickly, the time after he might want to find some &amp;ldquo;tutorial&amp;rdquo; to get going, and the next time he would look out for &amp;ldquo;references&amp;rdquo; documents to help dig further.&lt;/p&gt;
&lt;p&gt;Same could apply for internal documentation, writing a tutorial vs a getting-started guide is not the same and should be treated differently.&lt;/p&gt;
&lt;h2 id=&#34;give-context&#34;&gt;Give context&lt;/h2&gt;
&lt;p&gt;This is more for the technical documentation, either architectural decision record, design document, or most technical document you can think of. This is also applicable for commit message (if using Git).&lt;/p&gt;
&lt;p&gt;Giving context about the system or a change is probably one of the most important things to do.&lt;/p&gt;
&lt;p&gt;If you give enough context (requirements, constraints, how the system behave at time of writing), other people should be able to understand why the solution made sense at that time. It is also a good idea to talk about alternative solution, why they were not chosen (a little list of pros/cons can help).&lt;/p&gt;
&lt;h2 id=&#34;diagram-are-important&#34;&gt;Diagram are important&lt;/h2&gt;
&lt;p&gt;A picture is worth a thousand words. Use diagrams/schemas.&lt;/p&gt;
&lt;p&gt;And if you do use diagram, please include the source of the diagram to make sure anybody can update it later.&lt;/p&gt;
&lt;h2 id=&#34;write-more-documentation&#34;&gt;Write more documentation&lt;/h2&gt;
&lt;p&gt;We usually are reluctant to write documentation, but it is very rare in my experience that we write enough of it.&lt;/p&gt;
&lt;p&gt;Something that can help you write documentation is &lt;a href=&#34;https://www.hanselman.com/blog/do-they-deserve-the-gift-of-your-keystrokes&#34;&gt;Scott Hanselman&amp;rsquo;s take on keystrokes&lt;/a&gt;.
Instead of responding on your messaging app or in a mail to one person asking a question, write a blog post or in a wiki or in whatever format make sense, then share it. Overtime, you should be able to link people to your posts instead of responding over and over to the same questions.&lt;/p&gt;
&lt;h2 id=&#34;can-there-be-too-much-documentation&#34;&gt;Can there be too much documentation?&lt;/h2&gt;
&lt;p&gt;Yes. Documentation has a maintenance cost. Outdated documentation can even be dangerous because it can lead to false impression on a system.&lt;/p&gt;
&lt;p&gt;But with a little discipline, and dating the documentation you write to easily spot text that was written a few years ago versus text written last week, that should not be a problem.&lt;/p&gt;
&lt;p&gt;And frankly, it&amp;rsquo;s rare enough to have too much documentation anyway so this should not be a problem in most cases.&lt;/p&gt;
&lt;h2 id=&#34;more-material&#34;&gt;More material&lt;/h2&gt;
&lt;p&gt;Some links to learn about documentation in various forms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=t4vKPhjcMZg&#34;&gt;What nobody tells you about documentation - Daniele Procida - PyCon AU&lt;/a&gt;. Wonderful presentation, from the experience the Django team has with having great documentation for their project.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/4.0&#34;&gt;Django documentation&lt;/a&gt;.  Goes well with the presentation above, can give a good idea of what user-facing documentation can look like when done well.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://notes.portebois.net/2021/03/23.html&#34;&gt;Sébastien Portebois&amp;rsquo;s tips for better architecture diagrams&lt;/a&gt;. One of the architect on the project I work for put up together a really thorough post about diagram. Cherry on top is the checklist at the end to evaluate your diagram quickly against common mistakes.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cbea.ms/git-commit/&#34;&gt;How to write a great commit message&lt;/a&gt; A classic, to be on top of your git-commit game.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Emacs again</title>
      <link>https://www.julienrouse.com/blog/emacs-again/</link>
      <pubDate>Sat, 15 May 2021 19:00:00 +0000</pubDate>
      
      <guid>https://www.julienrouse.com/blog/emacs-again/</guid>
      <description>&lt;h1 id=&#34;emacs&#34;&gt;Emacs&lt;/h1&gt;
&lt;p&gt;Since the start of January, I am trying to switch back to
&lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;Here are some modes (packages/plugins in Emacs lingo) that I want to
try.&lt;/p&gt;
&lt;h2 id=&#34;org-mode&#34;&gt;org-mode&lt;/h2&gt;
&lt;p&gt;I am really drawn out to &lt;a href=&#34;https://orgmode.org/&#34;&gt;Org Mode&lt;/a&gt;, a major mode
(a mode is a plugin in Emacs) to help with todo-lists, planning,
agendas, literate programming and a lot more!&lt;/p&gt;
&lt;p&gt;I used it in the past with
various success, but because I could not use Emacs at work. I stopped using Emacs altogether
to stop switching between editor. I had
settled for the &lt;a href=&#34;https://foambubble.github.io/foam/&#34;&gt;Foam plugin&lt;/a&gt; for
VSCode, which offers some nices todo-list capabilities, an also a good
base for growing a knowledge base in the
&lt;a href=&#34;https://en.wikipedia.org/wiki/Zettelkasten&#34;&gt;Zettelkasten&lt;/a&gt; way.&lt;/p&gt;
&lt;p&gt;Since then, an extension for org-mode appeared:
&lt;a href=&#34;https://www.orgroam.com/&#34;&gt;org-roam&lt;/a&gt;, wich looks like a serious
contender I would like to try.&lt;/p&gt;
&lt;p&gt;(And actually this post is written with org-mode, and exported to
Markdown with &lt;a href=&#34;https://github.com/kawabata/ox-pandoc&#34;&gt;ox-pandoc&lt;/a&gt;, an
extension to use the magnificent &lt;a href=&#34;https://pandoc.org/&#34;&gt;pandoc&lt;/a&gt; to export
org files to various format.)&lt;/p&gt;
&lt;h2 id=&#34;magit&#34;&gt;Magit&lt;/h2&gt;
&lt;p&gt;This one is totally new to me, a
&lt;a href=&#34;https://stackoverflow.com/a/6976506/3729797&#34;&gt;porcelain&lt;/a&gt; for Git really
well integrated in Emacs.&lt;/p&gt;
&lt;p&gt;I have heard a lot of good things on &lt;a href=&#34;https://magit.vc/&#34;&gt;Magit&lt;/a&gt;, so it
is on my lists of packages to try!&lt;/p&gt;
&lt;h2 id=&#34;lsp-mode&#34;&gt;lsp-mode&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://emacs-lsp.github.io/lsp-mode/&#34;&gt;lsp-mode&lt;/a&gt; add support for
&lt;a href=&#34;https://microsoft.github.io/language-server-protocol/&#34;&gt;language server
protocol&lt;/a&gt; in
Emacs. I think this idea came originally from Microsoft/VSCode to
simplify the development of tooling for new language and editors. This
looks nice and should allow to have a good experience for most
programming language.&lt;/p&gt;
&lt;p&gt;Additionally, there is some integration with popular packages like Helm,
Ivy and other as well so it might help me to discover new packages.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/joaotavora/eglot&#34;&gt;eglot&lt;/a&gt; also add support for lsp in
Emacs, but looks less complete at first glance.&lt;/p&gt;
&lt;h2 id=&#34;other-packages-that-look-promising&#34;&gt;Other packages that look promising&lt;/h2&gt;
&lt;p&gt;And some less well known packages:&lt;/p&gt;
&lt;h3 id=&#34;dockerel&#34;&gt;docker.el&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Silex/docker.el&#34;&gt;docker.el&lt;/a&gt; is unsurprinsigly a mode
to work with Docker container in Emacs.&lt;/p&gt;
&lt;h3 id=&#34;kubel&#34;&gt;kubel&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/abrochard/kubel&#34;&gt;kubel&lt;/a&gt;
is a package for managing Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;I discovered it while watching this very very good video: &lt;a href=&#34;https://www.youtube.com/watch?v=w3krYEeqnyk&#34;&gt;Conquering
Kubernetes with Emacs&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;I am back in Emacs land, so much to (re)discover.&lt;/p&gt;
&lt;p&gt;And if you never heard of org-mode before (or
&lt;a href=&#34;https://www.gnu.org/software/emacs/&#34;&gt;Emacs&lt;/a&gt;), make yourself a favor and
go try it for yourself. It is such a different experience that you will
learn something for sure.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Review: the Art of Code</title>
      <link>https://www.julienrouse.com/blog/presentation_the_art_of_code/</link>
      <pubDate>Tue, 16 Jun 2020 19:00:00 +0400</pubDate>
      
      <guid>https://www.julienrouse.com/blog/presentation_the_art_of_code/</guid>
      <description>&lt;h1 id=&#34;the-art-of-codehttpswwwyoutubecomwatchv6avjhac3c2ufeatureemb_logo&#34;&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6avJHaC3C2U&amp;amp;feature=emb_logo&#34;&gt;The Art of Code&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6avJHaC3C2U&amp;amp;feature=emb_logo&#34;&gt;In his talk&lt;/a&gt;, Dylan Beattie does a really good recap about what kind of art has been enabled by using computers.&lt;/p&gt;
&lt;p&gt;From Conway&amp;rsquo;s Game of Life, to Mandelbrot set, then going on about the use of CGI in the movie industry, then moving on to code as an art like the Obsfucated C Challenge, the magic of Quines (program that prints themselves when run). It goes on about esoteric programming languages, Whitespace, Piet, Shakespeare and then the last part is dedicated to his own eso-lang, Rockstar.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Webpack-cli crashes only on Monday</title>
      <link>https://www.julienrouse.com/blog/webpack-cli-crashes-only-on-monday/</link>
      <pubDate>Sat, 06 Jul 2019 20:00:00 +0000</pubDate>
      
      <guid>https://www.julienrouse.com/blog/webpack-cli-crashes-only-on-monday/</guid>
      <description>&lt;h1 id=&#34;webpack-cli-crashes-for-windows-users-but-only-on-monday&#34;&gt;Webpack-cli crashes for Windows users, but only on Monday&lt;/h1&gt;
&lt;p&gt;It seems like a headline from the Onion&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. But unfortunately it&amp;rsquo;s not.&lt;/p&gt;
&lt;p&gt;Webpack-cli&lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; had a bug&lt;sup id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; recently because it tried to display a message for donations on the terminal when using it. But that message was only displayed on Monday(because there were complaints about seeing the donation message every time you were running a build).&lt;/p&gt;
&lt;p&gt;Then a bug was introduced into that code because it relies on &lt;code&gt;process.getuid &lt;/code&gt; which is not available on Windows, making the CLI crash but only on Windows and on Monday \(**)/.&lt;/p&gt;
&lt;h2 id=&#34;similar-story&#34;&gt;Similar story&lt;/h2&gt;
&lt;p&gt;If you like weird bug story, you can also read:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://gyrovague.com/2015/07/29/crashes-only-on-wednesdays/&#34;&gt;Crashes only on Wednesday&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://catless.ncl.ac.uk/Risks/25.77.html#subj14&#34;&gt;Cannot print on Tuesday!&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ibiblio.org/harris/500milemail.html&#34;&gt;The 500-mile mail&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://www.theonion.com/&#34;&gt;https://www.theonion.com/&lt;/a&gt; &lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:2&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/webpack/webpack-cli&#34;&gt;https://github.com/webpack/webpack-cli&lt;/a&gt; &lt;a href=&#34;#fnref:2&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&#34;fn:3&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/webpack/webpack-cli/issues/962&#34;&gt;https://github.com/webpack/webpack-cli/issues/962&lt;/a&gt; &lt;a href=&#34;#fnref:3&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</description>
    </item>
    
  </channel>
</rss>	